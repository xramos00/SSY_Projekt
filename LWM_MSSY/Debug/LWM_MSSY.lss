
LWM_MSSY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  000018b0  00001944  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000017fe  00800204  00800204  00001948  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001948  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001978  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000410  00000000  00000000  000019b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000612e  00000000  00000000  00001dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002c56  00000000  00000000  00007ef6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002560  00000000  00000000  0000ab4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009c8  00000000  00000000  0000d0ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001ed5  00000000  00000000  0000da74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002326  00000000  00000000  0000f949  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000428  00000000  00000000  00011c6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
       2:	00 00       	nop
       4:	b7 c0       	rjmp	.+366    	; 0x174 <__bad_interrupt>
       6:	00 00       	nop
       8:	b5 c0       	rjmp	.+362    	; 0x174 <__bad_interrupt>
       a:	00 00       	nop
       c:	b3 c0       	rjmp	.+358    	; 0x174 <__bad_interrupt>
       e:	00 00       	nop
      10:	b1 c0       	rjmp	.+354    	; 0x174 <__bad_interrupt>
      12:	00 00       	nop
      14:	af c0       	rjmp	.+350    	; 0x174 <__bad_interrupt>
      16:	00 00       	nop
      18:	ad c0       	rjmp	.+346    	; 0x174 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ab c0       	rjmp	.+342    	; 0x174 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a9 c0       	rjmp	.+338    	; 0x174 <__bad_interrupt>
      22:	00 00       	nop
      24:	a7 c0       	rjmp	.+334    	; 0x174 <__bad_interrupt>
      26:	00 00       	nop
      28:	a5 c0       	rjmp	.+330    	; 0x174 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a3 c0       	rjmp	.+326    	; 0x174 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a1 c0       	rjmp	.+322    	; 0x174 <__bad_interrupt>
      32:	00 00       	nop
      34:	9e c1       	rjmp	.+828    	; 0x372 <__vector_13>
      36:	00 00       	nop
      38:	9d c0       	rjmp	.+314    	; 0x174 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9b c0       	rjmp	.+310    	; 0x174 <__bad_interrupt>
      3e:	00 00       	nop
      40:	99 c0       	rjmp	.+306    	; 0x174 <__bad_interrupt>
      42:	00 00       	nop
      44:	97 c0       	rjmp	.+302    	; 0x174 <__bad_interrupt>
      46:	00 00       	nop
      48:	95 c0       	rjmp	.+298    	; 0x174 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	93 c0       	rjmp	.+294    	; 0x174 <__bad_interrupt>
      4e:	00 00       	nop
      50:	91 c0       	rjmp	.+290    	; 0x174 <__bad_interrupt>
      52:	00 00       	nop
      54:	8f c0       	rjmp	.+286    	; 0x174 <__bad_interrupt>
      56:	00 00       	nop
      58:	8d c0       	rjmp	.+282    	; 0x174 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8b c0       	rjmp	.+278    	; 0x174 <__bad_interrupt>
      5e:	00 00       	nop
      60:	89 c0       	rjmp	.+274    	; 0x174 <__bad_interrupt>
      62:	00 00       	nop
      64:	87 c0       	rjmp	.+270    	; 0x174 <__bad_interrupt>
      66:	00 00       	nop
      68:	85 c0       	rjmp	.+266    	; 0x174 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	83 c0       	rjmp	.+262    	; 0x174 <__bad_interrupt>
      6e:	00 00       	nop
      70:	81 c0       	rjmp	.+258    	; 0x174 <__bad_interrupt>
      72:	00 00       	nop
      74:	7f c0       	rjmp	.+254    	; 0x174 <__bad_interrupt>
      76:	00 00       	nop
      78:	7d c0       	rjmp	.+250    	; 0x174 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7b c0       	rjmp	.+246    	; 0x174 <__bad_interrupt>
      7e:	00 00       	nop
      80:	79 c0       	rjmp	.+242    	; 0x174 <__bad_interrupt>
      82:	00 00       	nop
      84:	77 c0       	rjmp	.+238    	; 0x174 <__bad_interrupt>
      86:	00 00       	nop
      88:	75 c0       	rjmp	.+234    	; 0x174 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	73 c0       	rjmp	.+230    	; 0x174 <__bad_interrupt>
      8e:	00 00       	nop
      90:	3d c2       	rjmp	.+1146   	; 0x50c <__vector_36>
      92:	00 00       	nop
      94:	1f c2       	rjmp	.+1086   	; 0x4d4 <__vector_37>
      96:	00 00       	nop
      98:	6d c0       	rjmp	.+218    	; 0x174 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6b c0       	rjmp	.+214    	; 0x174 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	69 c0       	rjmp	.+210    	; 0x174 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	67 c0       	rjmp	.+206    	; 0x174 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	53 c1       	rjmp	.+678    	; 0x350 <__vector_42>
      aa:	00 00       	nop
      ac:	63 c0       	rjmp	.+198    	; 0x174 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	61 c0       	rjmp	.+194    	; 0x174 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5f c0       	rjmp	.+190    	; 0x174 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5d c0       	rjmp	.+186    	; 0x174 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	5b c0       	rjmp	.+182    	; 0x174 <__bad_interrupt>
      be:	00 00       	nop
      c0:	59 c0       	rjmp	.+178    	; 0x174 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	57 c0       	rjmp	.+174    	; 0x174 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	55 c0       	rjmp	.+170    	; 0x174 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	53 c0       	rjmp	.+166    	; 0x174 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	51 c0       	rjmp	.+162    	; 0x174 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	4f c0       	rjmp	.+158    	; 0x174 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4d c0       	rjmp	.+154    	; 0x174 <__bad_interrupt>
      da:	00 00       	nop
      dc:	4b c0       	rjmp	.+150    	; 0x174 <__bad_interrupt>
      de:	00 00       	nop
      e0:	49 c0       	rjmp	.+146    	; 0x174 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	47 c0       	rjmp	.+142    	; 0x174 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	45 c0       	rjmp	.+138    	; 0x174 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	43 c0       	rjmp	.+134    	; 0x174 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	41 c0       	rjmp	.+130    	; 0x174 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	3f c0       	rjmp	.+126    	; 0x174 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	3d c0       	rjmp	.+122    	; 0x174 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	3b c0       	rjmp	.+118    	; 0x174 <__bad_interrupt>
      fe:	00 00       	nop
     100:	39 c0       	rjmp	.+114    	; 0x174 <__bad_interrupt>
     102:	00 00       	nop
     104:	37 c0       	rjmp	.+110    	; 0x174 <__bad_interrupt>
     106:	00 00       	nop
     108:	35 c0       	rjmp	.+106    	; 0x174 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	33 c0       	rjmp	.+102    	; 0x174 <__bad_interrupt>
     10e:	00 00       	nop
     110:	31 c0       	rjmp	.+98     	; 0x174 <__bad_interrupt>
     112:	00 00       	nop
     114:	2f c0       	rjmp	.+94     	; 0x174 <__bad_interrupt>
     116:	00 00       	nop
     118:	2d c0       	rjmp	.+90     	; 0x174 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	2b c0       	rjmp	.+86     	; 0x174 <__bad_interrupt>
     11e:	00 00       	nop
     120:	29 c0       	rjmp	.+82     	; 0x174 <__bad_interrupt>
     122:	00 00       	nop
     124:	27 c0       	rjmp	.+78     	; 0x174 <__bad_interrupt>
     126:	00 00       	nop
     128:	25 c0       	rjmp	.+74     	; 0x174 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	23 c0       	rjmp	.+70     	; 0x174 <__bad_interrupt>
     12e:	00 00       	nop
     130:	21 c0       	rjmp	.+66     	; 0x174 <__bad_interrupt>
	...

00000134 <__ctors_end>:
     134:	11 24       	eor	r1, r1
     136:	1f be       	out	0x3f, r1	; 63
     138:	cf ef       	ldi	r28, 0xFF	; 255
     13a:	d1 e8       	ldi	r29, 0x81	; 129
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	cd bf       	out	0x3d, r28	; 61
     140:	00 e0       	ldi	r16, 0x00	; 0
     142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
     144:	12 e0       	ldi	r17, 0x02	; 2
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b2 e0       	ldi	r27, 0x02	; 2
     14a:	e0 eb       	ldi	r30, 0xB0	; 176
     14c:	f8 e1       	ldi	r31, 0x18	; 24
     14e:	00 e0       	ldi	r16, 0x00	; 0
     150:	0b bf       	out	0x3b, r16	; 59
     152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
     154:	07 90       	elpm	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	a4 30       	cpi	r26, 0x04	; 4
     15a:	b1 07       	cpc	r27, r17
     15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
     15e:	2a e1       	ldi	r18, 0x1A	; 26
     160:	a4 e0       	ldi	r26, 0x04	; 4
     162:	b2 e0       	ldi	r27, 0x02	; 2
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	a2 30       	cpi	r26, 0x02	; 2
     16a:	b2 07       	cpc	r27, r18
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
     16e:	8d d0       	rcall	.+282    	; 0x28a <main>
     170:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <_exit>

00000174 <__bad_interrupt>:
     174:	45 cf       	rjmp	.-374    	; 0x0 <__vectors>

00000176 <appDataConf>:

/*************************************************************************//**
*****************************************************************************/
static void appDataConf(NWK_DataReq_t *req)
{
appDataReqBusy = false;
     176:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <appDataReqBusy>
     17a:	08 95       	ret

0000017c <appTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void appTimerHandler(SYS_Timer_t *timer)
{
     17c:	08 95       	ret

0000017e <printFrame>:

/*************************************************************************//**
*****************************************************************************/

static bool printFrame(NWK_DataInd_t *ind)
{
     17e:	cf 93       	push	r28
     180:	df 93       	push	r29
     182:	ec 01       	movw	r28, r24
	HAL_UartWriteByte(nwkIb.addr);
     184:	80 91 da 19 	lds	r24, 0x19DA	; 0x8019da <nwkIb>
     188:	58 d1       	rcall	.+688    	; 0x43a <HAL_UartWriteByte>
	HAL_UartWriteByte(ind->dstAddr);
     18a:	8a 81       	ldd	r24, Y+2	; 0x02
     18c:	56 d1       	rcall	.+684    	; 0x43a <HAL_UartWriteByte>
	return true;
}
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	df 91       	pop	r29
     192:	cf 91       	pop	r28
     194:	08 95       	ret

00000196 <HAL_UartBytesReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void HAL_UartBytesReceived(uint16_t bytes)
{
     196:	5f 92       	push	r5
     198:	6f 92       	push	r6
     19a:	7f 92       	push	r7
     19c:	8f 92       	push	r8
     19e:	9f 92       	push	r9
     1a0:	af 92       	push	r10
     1a2:	bf 92       	push	r11
     1a4:	cf 92       	push	r12
     1a6:	df 92       	push	r13
     1a8:	ef 92       	push	r14
     1aa:	ff 92       	push	r15
     1ac:	0f 93       	push	r16
     1ae:	1f 93       	push	r17
     1b0:	cf 93       	push	r28
     1b2:	df 93       	push	r29
     1b4:	8c 01       	movw	r16, r24
for (uint16_t i = 0; i < bytes; i++)
     1b6:	89 2b       	or	r24, r25
     1b8:	09 f4       	brne	.+2      	; 0x1bc <HAL_UartBytesReceived+0x26>
     1ba:	4f c0       	rjmp	.+158    	; 0x25a <HAL_UartBytesReceived+0xc4>
     1bc:	c0 e0       	ldi	r28, 0x00	; 0
     1be:	d0 e0       	ldi	r29, 0x00	; 0
if (appDataReqBusy || 0 == appUartBufferPtr)
return;

memcpy(appDataReqBuffer, appUartBuffer, appUartBufferPtr);

appDataReq.dstAddr = 1-APP_ADDR;
     1c0:	0f 2e       	mov	r0, r31
     1c2:	f0 ee       	ldi	r31, 0xE0	; 224
     1c4:	ef 2e       	mov	r14, r31
     1c6:	f2 e0       	ldi	r31, 0x02	; 2
     1c8:	ff 2e       	mov	r15, r31
     1ca:	f0 2d       	mov	r31, r0
     1cc:	aa 24       	eor	r10, r10
     1ce:	a3 94       	inc	r10
     1d0:	b1 2c       	mov	r11, r1
appDataReq.dstEndpoint = APP_ENDPOINT;
     1d2:	88 24       	eor	r8, r8
     1d4:	83 94       	inc	r8
appDataReq.srcEndpoint = APP_ENDPOINT;
appDataReq.options = NWK_OPT_ENABLE_SECURITY;
     1d6:	68 94       	set
     1d8:	55 24       	eor	r5, r5
     1da:	51 f8       	bld	r5, 1
appDataReq.data = appDataReqBuffer;
appDataReq.size = appUartBufferPtr;
     1dc:	0f 2e       	mov	r0, r31
     1de:	fd e6       	ldi	r31, 0x6D	; 109
     1e0:	6f 2e       	mov	r6, r31
     1e2:	f0 2d       	mov	r31, r0
appDataReq.confirm = appDataConf;
     1e4:	0f 2e       	mov	r0, r31
     1e6:	fb eb       	ldi	r31, 0xBB	; 187
     1e8:	cf 2e       	mov	r12, r31
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	df 2e       	mov	r13, r31
     1ee:	f0 2d       	mov	r31, r0
uint8_t byte = HAL_UartReadByte();

if (appUartBufferPtr == sizeof(appUartBuffer))
appSendData();

if (appUartBufferPtr < sizeof(appUartBuffer))
     1f0:	71 2c       	mov	r7, r1
*****************************************************************************/
void HAL_UartBytesReceived(uint16_t bytes)
{
for (uint16_t i = 0; i < bytes; i++)
{
uint8_t byte = HAL_UartReadByte();
     1f2:	4a d1       	rcall	.+660    	; 0x488 <HAL_UartReadByte>
     1f4:	98 2e       	mov	r9, r24

if (appUartBufferPtr == sizeof(appUartBuffer))
     1f6:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <__data_end>
     1fa:	ed 36       	cpi	r30, 0x6D	; 109
     1fc:	01 f5       	brne	.+64     	; 0x23e <HAL_UartBytesReceived+0xa8>

/*************************************************************************//**
*****************************************************************************/
static void appSendData(void)
{
if (appDataReqBusy || 0 == appUartBufferPtr)
     1fe:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <appDataReqBusy>
     202:	81 11       	cpse	r24, r1
     204:	26 c0       	rjmp	.+76     	; 0x252 <HAL_UartBytesReceived+0xbc>
return;

memcpy(appDataReqBuffer, appUartBuffer, appUartBufferPtr);
     206:	8d e6       	ldi	r24, 0x6D	; 109
     208:	e5 e0       	ldi	r30, 0x05	; 5
     20a:	f2 e0       	ldi	r31, 0x02	; 2
     20c:	a2 e7       	ldi	r26, 0x72	; 114
     20e:	b2 e0       	ldi	r27, 0x02	; 2
     210:	01 90       	ld	r0, Z+
     212:	0d 92       	st	X+, r0
     214:	8a 95       	dec	r24
     216:	e1 f7       	brne	.-8      	; 0x210 <HAL_UartBytesReceived+0x7a>

appDataReq.dstAddr = 1-APP_ADDR;
     218:	f7 01       	movw	r30, r14
     21a:	b6 82       	std	Z+6, r11	; 0x06
     21c:	a5 82       	std	Z+5, r10	; 0x05
appDataReq.dstEndpoint = APP_ENDPOINT;
     21e:	87 82       	std	Z+7, r8	; 0x07
appDataReq.srcEndpoint = APP_ENDPOINT;
     220:	80 86       	std	Z+8, r8	; 0x08
appDataReq.options = NWK_OPT_ENABLE_SECURITY;
     222:	51 86       	std	Z+9, r5	; 0x09
appDataReq.data = appDataReqBuffer;
     224:	82 e7       	ldi	r24, 0x72	; 114
     226:	92 e0       	ldi	r25, 0x02	; 2
     228:	93 87       	std	Z+11, r25	; 0x0b
     22a:	82 87       	std	Z+10, r24	; 0x0a
appDataReq.size = appUartBufferPtr;
     22c:	64 86       	std	Z+12, r6	; 0x0c
appDataReq.confirm = appDataConf;
     22e:	d6 86       	std	Z+14, r13	; 0x0e
     230:	c5 86       	std	Z+13, r12	; 0x0d
NWK_DataReq(&appDataReq);
     232:	c7 01       	movw	r24, r14
     234:	5d d2       	rcall	.+1210   	; 0x6f0 <NWK_DataReq>

appUartBufferPtr = 0;
appDataReqBusy = true;
     236:	80 92 df 02 	sts	0x02DF, r8	; 0x8002df <appDataReqBusy>
uint8_t byte = HAL_UartReadByte();

if (appUartBufferPtr == sizeof(appUartBuffer))
appSendData();

if (appUartBufferPtr < sizeof(appUartBuffer))
     23a:	e7 2d       	mov	r30, r7
     23c:	02 c0       	rjmp	.+4      	; 0x242 <HAL_UartBytesReceived+0xac>
     23e:	ed 36       	cpi	r30, 0x6D	; 109
     240:	40 f4       	brcc	.+16     	; 0x252 <HAL_UartBytesReceived+0xbc>
appUartBuffer[appUartBufferPtr++] = byte;
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	8e 0f       	add	r24, r30
     246:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <__data_end>
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	eb 5f       	subi	r30, 0xFB	; 251
     24e:	fd 4f       	sbci	r31, 0xFD	; 253
     250:	90 82       	st	Z, r9

/*************************************************************************//**
*****************************************************************************/
void HAL_UartBytesReceived(uint16_t bytes)
{
for (uint16_t i = 0; i < bytes; i++)
     252:	21 96       	adiw	r28, 0x01	; 1
     254:	0c 17       	cp	r16, r28
     256:	1d 07       	cpc	r17, r29
     258:	61 f6       	brne	.-104    	; 0x1f2 <HAL_UartBytesReceived+0x5c>

if (appUartBufferPtr < sizeof(appUartBuffer))
appUartBuffer[appUartBufferPtr++] = byte;
}

SYS_TimerStop(&appTimer);
     25a:	81 ef       	ldi	r24, 0xF1	; 241
     25c:	92 e0       	ldi	r25, 0x02	; 2
     25e:	0e 94 ce 0a 	call	0x159c	; 0x159c <SYS_TimerStop>
SYS_TimerStart(&appTimer);
     262:	81 ef       	ldi	r24, 0xF1	; 241
     264:	92 e0       	ldi	r25, 0x02	; 2
     266:	0e 94 25 0b 	call	0x164a	; 0x164a <SYS_TimerStart>
}
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	1f 91       	pop	r17
     270:	0f 91       	pop	r16
     272:	ff 90       	pop	r15
     274:	ef 90       	pop	r14
     276:	df 90       	pop	r13
     278:	cf 90       	pop	r12
     27a:	bf 90       	pop	r11
     27c:	af 90       	pop	r10
     27e:	9f 90       	pop	r9
     280:	8f 90       	pop	r8
     282:	7f 90       	pop	r7
     284:	6f 90       	pop	r6
     286:	5f 90       	pop	r5
     288:	08 95       	ret

0000028a <main>:

/*************************************************************************//**
*****************************************************************************/
int main(void)
{
SYS_Init();
     28a:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <SYS_Init>
HAL_UartInit(38400);
     28e:	60 e0       	ldi	r22, 0x00	; 0
     290:	76 e9       	ldi	r23, 0x96	; 150
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	7c d0       	rcall	.+248    	; 0x390 <HAL_UartInit>
HAL_UartWriteByte('a');
     298:	81 e6       	ldi	r24, 0x61	; 97
     29a:	cf d0       	rcall	.+414    	; 0x43a <HAL_UartWriteByte>
     29c:	c0 e0       	ldi	r28, 0x00	; 0
for (int i = 0; i < NWK_ENDPOINTS_AMOUNT; i++)
{
	//HAL_UartWriteByte((uint8_t)i+65);
	NWK_OpenEndpoint(i, printFrame);
     29e:	6f eb       	ldi	r22, 0xBF	; 191
     2a0:	70 e0       	ldi	r23, 0x00	; 0
     2a2:	8c 2f       	mov	r24, r28
     2a4:	f0 d1       	rcall	.+992    	; 0x686 <NWK_OpenEndpoint>
     2a6:	cf 5f       	subi	r28, 0xFF	; 255
int main(void)
{
SYS_Init();
HAL_UartInit(38400);
HAL_UartWriteByte('a');
for (int i = 0; i < NWK_ENDPOINTS_AMOUNT; i++)
     2a8:	c0 31       	cpi	r28, 0x10	; 16
     2aa:	c9 f7       	brne	.-14     	; 0x29e <main+0x14>
#endif
PHY_SetRxState(true);

HAL_BoardInit();

appTimer.interval = APP_FLUSH_TIMER_INTERVAL;
     2ac:	c1 ef       	ldi	r28, 0xF1	; 241
     2ae:	d2 e0       	ldi	r29, 0x02	; 2
     2b0:	0f 2e       	mov	r0, r31
     2b2:	f4 e1       	ldi	r31, 0x14	; 20
     2b4:	cf 2e       	mov	r12, r31
     2b6:	d1 2c       	mov	r13, r1
     2b8:	e1 2c       	mov	r14, r1
     2ba:	f1 2c       	mov	r15, r1
     2bc:	f0 2d       	mov	r31, r0
appTimer.mode = SYS_TIMER_INTERVAL_MODE;
appTimer.handler = appTimerHandler;
     2be:	0e eb       	ldi	r16, 0xBE	; 190
	NWK_OpenEndpoint(i, printFrame);
}

while (1)
{
SYS_TaskHandler();
     2c0:	10 e0       	ldi	r17, 0x00	; 0
     2c2:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <SYS_TaskHandler>
HAL_UartTaskHandler();
     2c6:	79 d1       	rcall	.+754    	; 0x5ba <HAL_UartTaskHandler>

/*************************************************************************//**
*****************************************************************************/
static void APP_TaskHandler(void)
{
switch (appState)
     2c8:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <appState>
     2cc:	81 11       	cpse	r24, r1
	return true;
}

static void appInit(void)
{
NWK_SetAddr(APP_ADDR);
     2ce:	f9 cf       	rjmp	.-14     	; 0x2c2 <main+0x38>
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	90 e0       	ldi	r25, 0x00	; 0
NWK_SetPanId(APP_PANID);
     2d4:	cc d1       	rcall	.+920    	; 0x66e <NWK_SetAddr>
     2d6:	80 e9       	ldi	r24, 0x90	; 144
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	cf d1       	rcall	.+926    	; 0x67a <NWK_SetPanId>
PHY_SetChannel(APP_CHANNEL);
     2dc:	8f e0       	ldi	r24, 0x0F	; 15
     2de:	0e 94 8a 09 	call	0x1314	; 0x1314 <PHY_SetChannel>
#ifdef PHY_AT86RF212
PHY_SetBand(APP_BAND);
PHY_SetModulation(APP_MODULATION);
#endif
PHY_SetRxState(true);
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	0e 94 86 09 	call	0x130c	; 0x130c <PHY_SetRxState>

HAL_BoardInit();

appTimer.interval = APP_FLUSH_TIMER_INTERVAL;
     2e8:	ce 82       	std	Y+6, r12	; 0x06
     2ea:	df 82       	std	Y+7, r13	; 0x07
     2ec:	e8 86       	std	Y+8, r14	; 0x08
     2ee:	f9 86       	std	Y+9, r15	; 0x09
appTimer.mode = SYS_TIMER_INTERVAL_MODE;
     2f0:	1a 86       	std	Y+10, r1	; 0x0a
appTimer.handler = appTimerHandler;
     2f2:	1c 87       	std	Y+12, r17	; 0x0c
     2f4:	0b 87       	std	Y+11, r16	; 0x0b
switch (appState)
{
case APP_STATE_INITIAL:
{
appInit();
appState = APP_STATE_IDLE;
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <appState>
     2fc:	e2 cf       	rjmp	.-60     	; 0x2c2 <main+0x38>

000002fe <HAL_Init>:
     2fe:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     300:	0f b6       	in	r0, 0x3f	; 63
     302:	f8 94       	cli
     304:	a8 95       	wdr
     306:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     30a:	88 61       	ori	r24, 0x18	; 24
     30c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     310:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     314:	0f be       	out	0x3f, r0	; 63
     316:	e1 e6       	ldi	r30, 0x61	; 97
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	80 e8       	ldi	r24, 0x80	; 128
     31c:	80 83       	st	Z, r24
     31e:	10 82       	st	Z, r1
     320:	78 94       	sei
     322:	01 c0       	rjmp	.+2      	; 0x326 <HAL_TimerInit>
     324:	08 95       	ret

00000326 <HAL_TimerInit>:
     326:	10 92 d9 19 	sts	0x19D9, r1	; 0x8019d9 <halTimerIrqCount>
     32a:	80 e1       	ldi	r24, 0x10	; 16
     32c:	97 e2       	ldi	r25, 0x27	; 39
     32e:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
     332:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
     336:	e1 ea       	ldi	r30, 0xA1	; 161
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	88 e0       	ldi	r24, 0x08	; 8
     33c:	80 83       	st	Z, r24
     33e:	80 81       	ld	r24, Z
     340:	82 60       	ori	r24, 0x02	; 2
     342:	80 83       	st	Z, r24
     344:	e2 e7       	ldi	r30, 0x72	; 114
     346:	f0 e0       	ldi	r31, 0x00	; 0
     348:	80 81       	ld	r24, Z
     34a:	82 60       	ori	r24, 0x02	; 2
     34c:	80 83       	st	Z, r24
     34e:	08 95       	ret

00000350 <__vector_42>:
     350:	1f 92       	push	r1
     352:	0f 92       	push	r0
     354:	0f b6       	in	r0, 0x3f	; 63
     356:	0f 92       	push	r0
     358:	11 24       	eor	r1, r1
     35a:	8f 93       	push	r24
     35c:	80 91 d9 19 	lds	r24, 0x19D9	; 0x8019d9 <halTimerIrqCount>
     360:	8f 5f       	subi	r24, 0xFF	; 255
     362:	80 93 d9 19 	sts	0x19D9, r24	; 0x8019d9 <halTimerIrqCount>
     366:	8f 91       	pop	r24
     368:	0f 90       	pop	r0
     36a:	0f be       	out	0x3f, r0	; 63
     36c:	0f 90       	pop	r0
     36e:	1f 90       	pop	r1
     370:	18 95       	reti

00000372 <__vector_13>:
     372:	1f 92       	push	r1
     374:	0f 92       	push	r0
     376:	0f b6       	in	r0, 0x3f	; 63
     378:	0f 92       	push	r0
     37a:	11 24       	eor	r1, r1
     37c:	8f 93       	push	r24
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <halSleepTimerEvent>
     384:	8f 91       	pop	r24
     386:	0f 90       	pop	r0
     388:	0f be       	out	0x3f, r0	; 63
     38a:	0f 90       	pop	r0
     38c:	1f 90       	pop	r1
     38e:	18 95       	reti

00000390 <HAL_UartInit>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartInit(uint32_t baudrate)
{
  uint32_t brr = ((uint32_t)F_CPU * 2) / (16 * baudrate) - 1;
     390:	dc 01       	movw	r26, r24
     392:	cb 01       	movw	r24, r22
     394:	88 0f       	add	r24, r24
     396:	99 1f       	adc	r25, r25
     398:	aa 1f       	adc	r26, r26
     39a:	bb 1f       	adc	r27, r27
     39c:	88 0f       	add	r24, r24
     39e:	99 1f       	adc	r25, r25
     3a0:	aa 1f       	adc	r26, r26
     3a2:	bb 1f       	adc	r27, r27
     3a4:	9c 01       	movw	r18, r24
     3a6:	ad 01       	movw	r20, r26
     3a8:	22 0f       	add	r18, r18
     3aa:	33 1f       	adc	r19, r19
     3ac:	44 1f       	adc	r20, r20
     3ae:	55 1f       	adc	r21, r21
     3b0:	22 0f       	add	r18, r18
     3b2:	33 1f       	adc	r19, r19
     3b4:	44 1f       	adc	r20, r20
     3b6:	55 1f       	adc	r21, r21
     3b8:	60 e0       	ldi	r22, 0x00	; 0
     3ba:	74 e2       	ldi	r23, 0x24	; 36
     3bc:	84 ef       	ldi	r24, 0xF4	; 244
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__udivmodsi4>
     3c4:	ba 01       	movw	r22, r20
     3c6:	a9 01       	movw	r20, r18
     3c8:	41 50       	subi	r20, 0x01	; 1
     3ca:	51 09       	sbc	r21, r1
     3cc:	61 09       	sbc	r22, r1
     3ce:	71 09       	sbc	r23, r1

  UBRRxH = (brr >> 8) & 0xff;
     3d0:	bb 27       	eor	r27, r27
     3d2:	a7 2f       	mov	r26, r23
     3d4:	96 2f       	mov	r25, r22
     3d6:	85 2f       	mov	r24, r21
     3d8:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
  UBRRxL = (brr & 0xff);
     3dc:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
  UCSRxA = (1 << U2X1);
     3e0:	82 e0       	ldi	r24, 0x02	; 2
     3e2:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
  UCSRxB = (1 << TXEN1) | (1 << RXEN1) | (1 << RXCIE1);
     3e6:	88 e9       	ldi	r24, 0x98	; 152
     3e8:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
  UCSRxC = (3 << UCSZ10);
     3ec:	86 e0       	ldi	r24, 0x06	; 6
     3ee:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>

  txFifo.data = txData;
     3f2:	ee e2       	ldi	r30, 0x2E	; 46
     3f4:	f6 e0       	ldi	r31, 0x06	; 6
     3f6:	8d e9       	ldi	r24, 0x9D	; 157
     3f8:	94 e0       	ldi	r25, 0x04	; 4
     3fa:	91 87       	std	Z+9, r25	; 0x09
     3fc:	80 87       	std	Z+8, r24	; 0x08
  txFifo.size = HAL_UART_TX_FIFO_SIZE;
     3fe:	80 e9       	ldi	r24, 0x90	; 144
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	95 83       	std	Z+5, r25	; 0x05
     404:	84 83       	std	Z+4, r24	; 0x04
  txFifo.bytes = 0;
     406:	17 82       	std	Z+7, r1	; 0x07
     408:	16 82       	std	Z+6, r1	; 0x06
  txFifo.head = 0;
     40a:	11 82       	std	Z+1, r1	; 0x01
     40c:	10 82       	st	Z, r1
  txFifo.tail = 0;
     40e:	13 82       	std	Z+3, r1	; 0x03
     410:	12 82       	std	Z+2, r1	; 0x02

  rxFifo.data = rxData;
     412:	e3 e9       	ldi	r30, 0x93	; 147
     414:	f4 e0       	ldi	r31, 0x04	; 4
     416:	22 e0       	ldi	r18, 0x02	; 2
     418:	33 e0       	ldi	r19, 0x03	; 3
     41a:	31 87       	std	Z+9, r19	; 0x09
     41c:	20 87       	std	Z+8, r18	; 0x08
  rxFifo.size = HAL_UART_RX_FIFO_SIZE;
     41e:	95 83       	std	Z+5, r25	; 0x05
     420:	84 83       	std	Z+4, r24	; 0x04
  rxFifo.bytes = 0;
     422:	17 82       	std	Z+7, r1	; 0x07
     424:	16 82       	std	Z+6, r1	; 0x06
  rxFifo.head = 0;
     426:	11 82       	std	Z+1, r1	; 0x01
     428:	10 82       	st	Z, r1
  rxFifo.tail = 0;
     42a:	13 82       	std	Z+3, r1	; 0x03
     42c:	12 82       	std	Z+2, r1	; 0x02

  udrEmpty = true;
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <udrEmpty>
  newData = false;
     434:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <newData>
     438:	08 95       	ret

0000043a <HAL_UartWriteByte>:
}

/*************************************************************************//**
*****************************************************************************/
void HAL_UartWriteByte(uint8_t byte)
{
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
  if (txFifo.bytes == txFifo.size)
     43e:	ee e2       	ldi	r30, 0x2E	; 46
     440:	f6 e0       	ldi	r31, 0x06	; 6
     442:	26 81       	ldd	r18, Z+6	; 0x06
     444:	37 81       	ldd	r19, Z+7	; 0x07
     446:	64 81       	ldd	r22, Z+4	; 0x04
     448:	75 81       	ldd	r23, Z+5	; 0x05
     44a:	26 17       	cp	r18, r22
     44c:	37 07       	cpc	r19, r23
     44e:	c9 f0       	breq	.+50     	; 0x482 <HAL_UartWriteByte+0x48>
    return;

  txFifo.data[txFifo.tail++] = byte;
     450:	c0 85       	ldd	r28, Z+8	; 0x08
     452:	d1 85       	ldd	r29, Z+9	; 0x09
     454:	42 81       	ldd	r20, Z+2	; 0x02
     456:	53 81       	ldd	r21, Z+3	; 0x03
     458:	da 01       	movw	r26, r20
     45a:	11 96       	adiw	r26, 0x01	; 1
     45c:	b3 83       	std	Z+3, r27	; 0x03
     45e:	a2 83       	std	Z+2, r26	; 0x02
     460:	fe 01       	movw	r30, r28
     462:	e4 0f       	add	r30, r20
     464:	f5 1f       	adc	r31, r21
     466:	80 83       	st	Z, r24
  if (txFifo.tail == txFifo.size)
     468:	6a 17       	cp	r22, r26
     46a:	7b 07       	cpc	r23, r27
     46c:	21 f4       	brne	.+8      	; 0x476 <HAL_UartWriteByte+0x3c>
    txFifo.tail = 0;
     46e:	10 92 31 06 	sts	0x0631, r1	; 0x800631 <txFifo+0x3>
     472:	10 92 30 06 	sts	0x0630, r1	; 0x800630 <txFifo+0x2>
  txFifo.bytes++;
     476:	2f 5f       	subi	r18, 0xFF	; 255
     478:	3f 4f       	sbci	r19, 0xFF	; 255
     47a:	30 93 35 06 	sts	0x0635, r19	; 0x800635 <txFifo+0x7>
     47e:	20 93 34 06 	sts	0x0634, r18	; 0x800634 <txFifo+0x6>
}
     482:	df 91       	pop	r29
     484:	cf 91       	pop	r28
     486:	08 95       	ret

00000488 <HAL_UartReadByte>:
uint8_t HAL_UartReadByte(void)
{
  uint8_t byte;

  PRAGMA(diag_suppress=Pa082);
  ATOMIC_SECTION_ENTER
     488:	4f b7       	in	r20, 0x3f	; 63
     48a:	f8 94       	cli
    byte = rxFifo.data[rxFifo.head++];
     48c:	e3 e9       	ldi	r30, 0x93	; 147
     48e:	f4 e0       	ldi	r31, 0x04	; 4
     490:	20 85       	ldd	r18, Z+8	; 0x08
     492:	31 85       	ldd	r19, Z+9	; 0x09
     494:	80 81       	ld	r24, Z
     496:	91 81       	ldd	r25, Z+1	; 0x01
     498:	bc 01       	movw	r22, r24
     49a:	6f 5f       	subi	r22, 0xFF	; 255
     49c:	7f 4f       	sbci	r23, 0xFF	; 255
     49e:	71 83       	std	Z+1, r23	; 0x01
     4a0:	60 83       	st	Z, r22
     4a2:	d9 01       	movw	r26, r18
     4a4:	a8 0f       	add	r26, r24
     4a6:	b9 1f       	adc	r27, r25
     4a8:	8c 91       	ld	r24, X
    if (rxFifo.head == rxFifo.size)
     4aa:	60 81       	ld	r22, Z
     4ac:	71 81       	ldd	r23, Z+1	; 0x01
     4ae:	24 81       	ldd	r18, Z+4	; 0x04
     4b0:	35 81       	ldd	r19, Z+5	; 0x05
     4b2:	62 17       	cp	r22, r18
     4b4:	73 07       	cpc	r23, r19
     4b6:	21 f4       	brne	.+8      	; 0x4c0 <HAL_UartReadByte+0x38>
      rxFifo.head = 0;
     4b8:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <rxFifo+0x1>
     4bc:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <rxFifo>
    rxFifo.bytes--;
     4c0:	e3 e9       	ldi	r30, 0x93	; 147
     4c2:	f4 e0       	ldi	r31, 0x04	; 4
     4c4:	26 81       	ldd	r18, Z+6	; 0x06
     4c6:	37 81       	ldd	r19, Z+7	; 0x07
     4c8:	21 50       	subi	r18, 0x01	; 1
     4ca:	31 09       	sbc	r19, r1
     4cc:	37 83       	std	Z+7, r19	; 0x07
     4ce:	26 83       	std	Z+6, r18	; 0x06
  ATOMIC_SECTION_LEAVE
     4d0:	4f bf       	out	0x3f, r20	; 63
  PRAGMA(diag_default=Pa082);

  return byte;
}
     4d2:	08 95       	ret

000004d4 <__vector_37>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
     4d4:	1f 92       	push	r1
     4d6:	0f 92       	push	r0
     4d8:	0f b6       	in	r0, 0x3f	; 63
     4da:	0f 92       	push	r0
     4dc:	11 24       	eor	r1, r1
     4de:	0b b6       	in	r0, 0x3b	; 59
     4e0:	0f 92       	push	r0
     4e2:	8f 93       	push	r24
     4e4:	ef 93       	push	r30
     4e6:	ff 93       	push	r31
  udrEmpty = true;
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <udrEmpty>
  UCSRxB &= ~(1 << UDRIE1);
     4ee:	e9 ec       	ldi	r30, 0xC9	; 201
     4f0:	f0 e0       	ldi	r31, 0x00	; 0
     4f2:	80 81       	ld	r24, Z
     4f4:	8f 7d       	andi	r24, 0xDF	; 223
     4f6:	80 83       	st	Z, r24
}
     4f8:	ff 91       	pop	r31
     4fa:	ef 91       	pop	r30
     4fc:	8f 91       	pop	r24
     4fe:	0f 90       	pop	r0
     500:	0b be       	out	0x3b, r0	; 59
     502:	0f 90       	pop	r0
     504:	0f be       	out	0x3f, r0	; 63
     506:	0f 90       	pop	r0
     508:	1f 90       	pop	r1
     50a:	18 95       	reti

0000050c <__vector_36>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
     50c:	1f 92       	push	r1
     50e:	0f 92       	push	r0
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	0f 92       	push	r0
     514:	11 24       	eor	r1, r1
     516:	0b b6       	in	r0, 0x3b	; 59
     518:	0f 92       	push	r0
     51a:	2f 93       	push	r18
     51c:	3f 93       	push	r19
     51e:	4f 93       	push	r20
     520:	5f 93       	push	r21
     522:	6f 93       	push	r22
     524:	7f 93       	push	r23
     526:	8f 93       	push	r24
     528:	9f 93       	push	r25
     52a:	af 93       	push	r26
     52c:	bf 93       	push	r27
     52e:	ef 93       	push	r30
     530:	ff 93       	push	r31
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
     532:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
  uint8_t byte = UDRx;
     536:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
     53a:	8c 71       	andi	r24, 0x1C	; 28
     53c:	59 f5       	brne	.+86     	; 0x594 <__vector_36+0x88>
  {
    if (rxFifo.bytes == rxFifo.size)
     53e:	e3 e9       	ldi	r30, 0x93	; 147
     540:	f4 e0       	ldi	r31, 0x04	; 4
     542:	46 81       	ldd	r20, Z+6	; 0x06
     544:	57 81       	ldd	r21, Z+7	; 0x07
     546:	84 81       	ldd	r24, Z+4	; 0x04
     548:	95 81       	ldd	r25, Z+5	; 0x05
     54a:	48 17       	cp	r20, r24
     54c:	59 07       	cpc	r21, r25
     54e:	11 f1       	breq	.+68     	; 0x594 <__vector_36+0x88>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
     550:	40 85       	ldd	r20, Z+8	; 0x08
     552:	51 85       	ldd	r21, Z+9	; 0x09
     554:	82 81       	ldd	r24, Z+2	; 0x02
     556:	93 81       	ldd	r25, Z+3	; 0x03
     558:	bc 01       	movw	r22, r24
     55a:	6f 5f       	subi	r22, 0xFF	; 255
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	73 83       	std	Z+3, r23	; 0x03
     560:	62 83       	std	Z+2, r22	; 0x02
     562:	da 01       	movw	r26, r20
     564:	a8 0f       	add	r26, r24
     566:	b9 1f       	adc	r27, r25
     568:	2c 93       	st	X, r18
    if (rxFifo.tail == rxFifo.size)
     56a:	22 81       	ldd	r18, Z+2	; 0x02
     56c:	33 81       	ldd	r19, Z+3	; 0x03
     56e:	84 81       	ldd	r24, Z+4	; 0x04
     570:	95 81       	ldd	r25, Z+5	; 0x05
     572:	28 17       	cp	r18, r24
     574:	39 07       	cpc	r19, r25
     576:	21 f4       	brne	.+8      	; 0x580 <__vector_36+0x74>
      rxFifo.tail = 0;
     578:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <rxFifo+0x3>
     57c:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <rxFifo+0x2>
    rxFifo.bytes++;
     580:	e3 e9       	ldi	r30, 0x93	; 147
     582:	f4 e0       	ldi	r31, 0x04	; 4
     584:	86 81       	ldd	r24, Z+6	; 0x06
     586:	97 81       	ldd	r25, Z+7	; 0x07
     588:	01 96       	adiw	r24, 0x01	; 1
     58a:	97 83       	std	Z+7, r25	; 0x07
     58c:	86 83       	std	Z+6, r24	; 0x06

    newData = true;
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <newData>
  }

  PRAGMA(diag_default=Pa082);
}
     594:	ff 91       	pop	r31
     596:	ef 91       	pop	r30
     598:	bf 91       	pop	r27
     59a:	af 91       	pop	r26
     59c:	9f 91       	pop	r25
     59e:	8f 91       	pop	r24
     5a0:	7f 91       	pop	r23
     5a2:	6f 91       	pop	r22
     5a4:	5f 91       	pop	r21
     5a6:	4f 91       	pop	r20
     5a8:	3f 91       	pop	r19
     5aa:	2f 91       	pop	r18
     5ac:	0f 90       	pop	r0
     5ae:	0b be       	out	0x3b, r0	; 59
     5b0:	0f 90       	pop	r0
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	0f 90       	pop	r0
     5b6:	1f 90       	pop	r1
     5b8:	18 95       	reti

000005ba <HAL_UartTaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartTaskHandler(void)
{
  if (txFifo.bytes && udrEmpty)
     5ba:	80 91 34 06 	lds	r24, 0x0634	; 0x800634 <txFifo+0x6>
     5be:	90 91 35 06 	lds	r25, 0x0635	; 0x800635 <txFifo+0x7>
     5c2:	00 97       	sbiw	r24, 0x00	; 0
     5c4:	69 f1       	breq	.+90     	; 0x620 <HAL_UartTaskHandler+0x66>
     5c6:	20 91 01 03 	lds	r18, 0x0301	; 0x800301 <udrEmpty>
     5ca:	22 23       	and	r18, r18
     5cc:	49 f1       	breq	.+82     	; 0x620 <HAL_UartTaskHandler+0x66>
  {
    uint8_t byte;

    byte = txFifo.data[txFifo.head++];
     5ce:	ee e2       	ldi	r30, 0x2E	; 46
     5d0:	f6 e0       	ldi	r31, 0x06	; 6
     5d2:	60 85       	ldd	r22, Z+8	; 0x08
     5d4:	71 85       	ldd	r23, Z+9	; 0x09
     5d6:	20 81       	ld	r18, Z
     5d8:	31 81       	ldd	r19, Z+1	; 0x01
     5da:	a9 01       	movw	r20, r18
     5dc:	4f 5f       	subi	r20, 0xFF	; 255
     5de:	5f 4f       	sbci	r21, 0xFF	; 255
     5e0:	51 83       	std	Z+1, r21	; 0x01
     5e2:	40 83       	st	Z, r20
     5e4:	db 01       	movw	r26, r22
     5e6:	a2 0f       	add	r26, r18
     5e8:	b3 1f       	adc	r27, r19
     5ea:	2c 91       	ld	r18, X
    if (txFifo.head == txFifo.size)
     5ec:	64 81       	ldd	r22, Z+4	; 0x04
     5ee:	75 81       	ldd	r23, Z+5	; 0x05
     5f0:	46 17       	cp	r20, r22
     5f2:	57 07       	cpc	r21, r23
     5f4:	21 f4       	brne	.+8      	; 0x5fe <HAL_UartTaskHandler+0x44>
      txFifo.head = 0;
     5f6:	10 92 2f 06 	sts	0x062F, r1	; 0x80062f <txFifo+0x1>
     5fa:	10 92 2e 06 	sts	0x062E, r1	; 0x80062e <txFifo>
    txFifo.bytes--;
     5fe:	01 97       	sbiw	r24, 0x01	; 1
     600:	90 93 35 06 	sts	0x0635, r25	; 0x800635 <txFifo+0x7>
     604:	80 93 34 06 	sts	0x0634, r24	; 0x800634 <txFifo+0x6>

    ATOMIC_SECTION_ENTER
     608:	9f b7       	in	r25, 0x3f	; 63
     60a:	f8 94       	cli
      UDRx = byte;
     60c:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
      UCSRxB |= (1 << UDRIE1);
     610:	e9 ec       	ldi	r30, 0xC9	; 201
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	80 81       	ld	r24, Z
     616:	80 62       	ori	r24, 0x20	; 32
     618:	80 83       	st	Z, r24
      udrEmpty = false;
     61a:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <udrEmpty>
    ATOMIC_SECTION_LEAVE
     61e:	9f bf       	out	0x3f, r25	; 63

  {
    uint16_t bytes;
    bool new;

    ATOMIC_SECTION_ENTER
     620:	2f b7       	in	r18, 0x3f	; 63
     622:	f8 94       	cli
      new = newData;
     624:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <newData>
      newData = false;
     628:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <newData>
      bytes = rxFifo.bytes;
     62c:	40 91 99 04 	lds	r20, 0x0499	; 0x800499 <rxFifo+0x6>
     630:	50 91 9a 04 	lds	r21, 0x049A	; 0x80049a <rxFifo+0x7>
    ATOMIC_SECTION_LEAVE
     634:	2f bf       	out	0x3f, r18	; 63

    if (new)
     636:	99 23       	and	r25, r25
     638:	11 f0       	breq	.+4      	; 0x63e <HAL_UartTaskHandler+0x84>
      HAL_UartBytesReceived(bytes);
     63a:	ca 01       	movw	r24, r20
     63c:	ac cd       	rjmp	.-1192   	; 0x196 <HAL_UartBytesReceived>
     63e:	08 95       	ret

00000640 <NWK_Init>:
      return val[i];
    cl += 25;
  }

  return 255;
}
     640:	ea ed       	ldi	r30, 0xDA	; 218
     642:	f9 e1       	ldi	r31, 0x19	; 25
     644:	14 82       	std	Z+4, r1	; 0x04
     646:	15 82       	std	Z+5, r1	; 0x05
     648:	11 82       	std	Z+1, r1	; 0x01
     64a:	10 82       	st	Z, r1
     64c:	17 a2       	std	Z+39, r1	; 0x27
     64e:	16 a2       	std	Z+38, r1	; 0x26
     650:	e0 ee       	ldi	r30, 0xE0	; 224
     652:	f9 e1       	ldi	r31, 0x19	; 25
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	9a e1       	ldi	r25, 0x1A	; 26
     658:	11 92       	st	Z+, r1
     65a:	11 92       	st	Z+, r1
     65c:	e8 17       	cp	r30, r24
     65e:	f9 07       	cpc	r31, r25
     660:	d9 f7       	brne	.-10     	; 0x658 <NWK_Init+0x18>
     662:	ad d4       	rcall	.+2394   	; 0xfbe <nwkTxInit>
     664:	d7 d2       	rcall	.+1454   	; 0xc14 <nwkRxInit>
     666:	0b d1       	rcall	.+534    	; 0x87e <nwkFrameInit>
     668:	3e d0       	rcall	.+124    	; 0x6e6 <nwkDataReqInit>
     66a:	90 c1       	rjmp	.+800    	; 0x98c <nwkRouteInit>
     66c:	08 95       	ret

0000066e <NWK_SetAddr>:
     66e:	90 93 db 19 	sts	0x19DB, r25	; 0x8019db <nwkIb+0x1>
     672:	80 93 da 19 	sts	0x19DA, r24	; 0x8019da <nwkIb>
     676:	64 c6       	rjmp	.+3272   	; 0x1340 <PHY_SetShortAddr>
     678:	08 95       	ret

0000067a <NWK_SetPanId>:
     67a:	90 93 dd 19 	sts	0x19DD, r25	; 0x8019dd <nwkIb+0x3>
     67e:	80 93 dc 19 	sts	0x19DC, r24	; 0x8019dc <nwkIb+0x2>
     682:	4c c6       	rjmp	.+3224   	; 0x131c <PHY_SetPanId>
     684:	08 95       	ret

00000686 <NWK_OpenEndpoint>:
     686:	e8 2f       	mov	r30, r24
     688:	f0 e0       	ldi	r31, 0x00	; 0
     68a:	ee 0f       	add	r30, r30
     68c:	ff 1f       	adc	r31, r31
     68e:	e0 52       	subi	r30, 0x20	; 32
     690:	f6 4e       	sbci	r31, 0xE6	; 230
     692:	71 83       	std	Z+1, r23	; 0x01
     694:	60 83       	st	Z, r22
     696:	08 95       	ret

00000698 <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
     698:	f5 d2       	rcall	.+1514   	; 0xc84 <nwkRxTaskHandler>
  nwkTxTaskHandler();
     69a:	4a d5       	rcall	.+2708   	; 0x1130 <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
     69c:	4d c0       	rjmp	.+154    	; 0x738 <nwkDataReqTaskHandler>
     69e:	08 95       	ret

000006a0 <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     6a0:	e0 91 38 06 	lds	r30, 0x0638	; 0x800638 <nwkDataReqQueue>
     6a4:	f0 91 39 06 	lds	r31, 0x0639	; 0x800639 <nwkDataReqQueue+0x1>
     6a8:	30 97       	sbiw	r30, 0x00	; 0
     6aa:	d9 f0       	breq	.+54     	; 0x6e2 <nwkDataReqTxConf+0x42>
  {
    if (req->frame == frame)
     6ac:	22 81       	ldd	r18, Z+2	; 0x02
     6ae:	33 81       	ldd	r19, Z+3	; 0x03
     6b0:	82 17       	cp	r24, r18
     6b2:	93 07       	cpc	r25, r19
     6b4:	89 f4       	brne	.+34     	; 0x6d8 <nwkDataReqTxConf+0x38>
     6b6:	05 c0       	rjmp	.+10     	; 0x6c2 <nwkDataReqTxConf+0x22>
     6b8:	22 81       	ldd	r18, Z+2	; 0x02
     6ba:	33 81       	ldd	r19, Z+3	; 0x03
     6bc:	28 17       	cp	r18, r24
     6be:	39 07       	cpc	r19, r25
     6c0:	59 f4       	brne	.+22     	; 0x6d8 <nwkDataReqTxConf+0x38>
    {
      req->status = frame->tx.status;
     6c2:	dc 01       	movw	r26, r24
     6c4:	ad 57       	subi	r26, 0x7D	; 125
     6c6:	bf 4f       	sbci	r27, 0xFF	; 255
     6c8:	2c 91       	ld	r18, X
     6ca:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
     6cc:	13 96       	adiw	r26, 0x03	; 3
     6ce:	2c 91       	ld	r18, X
     6d0:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
     6d2:	22 e0       	ldi	r18, 0x02	; 2
     6d4:	24 83       	std	Z+4, r18	; 0x04
      break;
     6d6:	05 c0       	rjmp	.+10     	; 0x6e2 <nwkDataReqTxConf+0x42>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     6d8:	01 90       	ld	r0, Z+
     6da:	f0 81       	ld	r31, Z
     6dc:	e0 2d       	mov	r30, r0
     6de:	30 97       	sbiw	r30, 0x00	; 0
     6e0:	59 f7       	brne	.-42     	; 0x6b8 <nwkDataReqTxConf+0x18>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
     6e2:	11 c1       	rjmp	.+546    	; 0x906 <nwkFrameFree>
     6e4:	08 95       	ret

000006e6 <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
     6e6:	10 92 39 06 	sts	0x0639, r1	; 0x800639 <nwkDataReqQueue+0x1>
     6ea:	10 92 38 06 	sts	0x0638, r1	; 0x800638 <nwkDataReqQueue>
     6ee:	08 95       	ret

000006f0 <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
     6f0:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
     6f2:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
     6f4:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
     6f6:	13 82       	std	Z+3, r1	; 0x03
     6f8:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
     6fa:	aa ed       	ldi	r26, 0xDA	; 218
     6fc:	b9 e1       	ldi	r27, 0x19	; 25
     6fe:	96 96       	adiw	r26, 0x26	; 38
     700:	8d 91       	ld	r24, X+
     702:	9c 91       	ld	r25, X
     704:	97 97       	sbiw	r26, 0x27	; 39
     706:	01 96       	adiw	r24, 0x01	; 1
     708:	97 96       	adiw	r26, 0x27	; 39
     70a:	9c 93       	st	X, r25
     70c:	8e 93       	st	-X, r24
     70e:	96 97       	sbiw	r26, 0x26	; 38

  if (NULL == nwkDataReqQueue)
     710:	80 91 38 06 	lds	r24, 0x0638	; 0x800638 <nwkDataReqQueue>
     714:	90 91 39 06 	lds	r25, 0x0639	; 0x800639 <nwkDataReqQueue+0x1>
     718:	00 97       	sbiw	r24, 0x00	; 0
     71a:	39 f4       	brne	.+14     	; 0x72a <NWK_DataReq+0x3a>
  {
    req->next = NULL;
     71c:	11 82       	std	Z+1, r1	; 0x01
     71e:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
     720:	f0 93 39 06 	sts	0x0639, r31	; 0x800639 <nwkDataReqQueue+0x1>
     724:	e0 93 38 06 	sts	0x0638, r30	; 0x800638 <nwkDataReqQueue>
     728:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
     72a:	91 83       	std	Z+1, r25	; 0x01
     72c:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
     72e:	f0 93 39 06 	sts	0x0639, r31	; 0x800639 <nwkDataReqQueue+0x1>
     732:	e0 93 38 06 	sts	0x0638, r30	; 0x800638 <nwkDataReqQueue>
     736:	08 95       	ret

00000738 <nwkDataReqTaskHandler>:

/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
     738:	0f 93       	push	r16
     73a:	1f 93       	push	r17
     73c:	cf 93       	push	r28
     73e:	df 93       	push	r29
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     740:	e0 91 38 06 	lds	r30, 0x0638	; 0x800638 <nwkDataReqQueue>
     744:	f0 91 39 06 	lds	r31, 0x0639	; 0x800639 <nwkDataReqQueue+0x1>
     748:	30 97       	sbiw	r30, 0x00	; 0
     74a:	09 f4       	brne	.+2      	; 0x74e <nwkDataReqTaskHandler+0x16>
     74c:	93 c0       	rjmp	.+294    	; 0x874 <nwkDataReqTaskHandler+0x13c>
     74e:	ef 01       	movw	r28, r30
  {
    switch (req->state)
     750:	8c 81       	ldd	r24, Y+4	; 0x04
     752:	88 23       	and	r24, r24
     754:	21 f0       	breq	.+8      	; 0x75e <nwkDataReqTaskHandler+0x26>
     756:	82 30       	cpi	r24, 0x02	; 2
     758:	09 f4       	brne	.+2      	; 0x75c <nwkDataReqTaskHandler+0x24>
     75a:	66 c0       	rjmp	.+204    	; 0x828 <nwkDataReqTaskHandler+0xf0>
     75c:	85 c0       	rjmp	.+266    	; 0x868 <nwkDataReqTaskHandler+0x130>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
     75e:	9a d0       	rcall	.+308    	; 0x894 <nwkFrameAlloc>
     760:	8c 01       	movw	r16, r24
     762:	00 97       	sbiw	r24, 0x00	; 0
     764:	21 f4       	brne	.+8      	; 0x76e <nwkDataReqTaskHandler+0x36>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
     766:	82 e0       	ldi	r24, 0x02	; 2
     768:	8c 83       	std	Y+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
     76a:	8f 87       	std	Y+15, r24	; 0x0f
     76c:	83 c0       	rjmp	.+262    	; 0x874 <nwkDataReqTaskHandler+0x13c>
    return;
  }

  req->frame = frame;
     76e:	9b 83       	std	Y+3, r25	; 0x03
     770:	8a 83       	std	Y+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	8c 83       	std	Y+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
     776:	f8 01       	movw	r30, r16
     778:	e9 57       	subi	r30, 0x79	; 121
     77a:	ff 4f       	sbci	r31, 0xFF	; 255
     77c:	80 e5       	ldi	r24, 0x50	; 80
     77e:	93 e0       	ldi	r25, 0x03	; 3
     780:	91 83       	std	Z+1, r25	; 0x01
     782:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
     784:	31 97       	sbiw	r30, 0x01	; 1
     786:	89 85       	ldd	r24, Y+9	; 0x09
     788:	82 fb       	bst	r24, 2
     78a:	88 27       	eor	r24, r24
     78c:	80 f9       	bld	r24, 0
     78e:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
     790:	99 85       	ldd	r25, Y+9	; 0x09
     792:	d8 01       	movw	r26, r16
     794:	1b 96       	adiw	r26, 0x0b	; 11
     796:	8c 91       	ld	r24, X
     798:	1b 97       	sbiw	r26, 0x0b	; 11
     79a:	90 fb       	bst	r25, 0
     79c:	80 f9       	bld	r24, 0
     79e:	1b 96       	adiw	r26, 0x0b	; 11
     7a0:	8c 93       	st	X, r24
     7a2:	1b 97       	sbiw	r26, 0x0b	; 11
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
     7a4:	99 85       	ldd	r25, Y+9	; 0x09
     7a6:	93 fb       	bst	r25, 3
     7a8:	99 27       	eor	r25, r25
     7aa:	90 f9       	bld	r25, 0
     7ac:	90 fb       	bst	r25, 0
     7ae:	82 f9       	bld	r24, 2
     7b0:	1b 96       	adiw	r26, 0x0b	; 11
     7b2:	8c 93       	st	X, r24
     7b4:	1b 97       	sbiw	r26, 0x0b	; 11
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     7b6:	ea ed       	ldi	r30, 0xDA	; 218
     7b8:	f9 e1       	ldi	r31, 0x19	; 25
     7ba:	84 81       	ldd	r24, Z+4	; 0x04
     7bc:	8f 5f       	subi	r24, 0xFF	; 255
     7be:	84 83       	std	Z+4, r24	; 0x04
     7c0:	1c 96       	adiw	r26, 0x0c	; 12
     7c2:	8c 93       	st	X, r24
     7c4:	1c 97       	sbiw	r26, 0x0c	; 12
  frame->header.nwkSrcAddr = nwkIb.addr;
     7c6:	80 81       	ld	r24, Z
     7c8:	91 81       	ldd	r25, Z+1	; 0x01
     7ca:	1e 96       	adiw	r26, 0x0e	; 14
     7cc:	9c 93       	st	X, r25
     7ce:	8e 93       	st	-X, r24
     7d0:	1d 97       	sbiw	r26, 0x0d	; 13
  frame->header.nwkDstAddr = req->dstAddr;
     7d2:	8d 81       	ldd	r24, Y+5	; 0x05
     7d4:	9e 81       	ldd	r25, Y+6	; 0x06
     7d6:	50 96       	adiw	r26, 0x10	; 16
     7d8:	9c 93       	st	X, r25
     7da:	8e 93       	st	-X, r24
     7dc:	1f 97       	sbiw	r26, 0x0f	; 15
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
     7de:	88 85       	ldd	r24, Y+8	; 0x08
     7e0:	98 2f       	mov	r25, r24
     7e2:	9f 70       	andi	r25, 0x0F	; 15
     7e4:	51 96       	adiw	r26, 0x11	; 17
     7e6:	8c 91       	ld	r24, X
     7e8:	51 97       	sbiw	r26, 0x11	; 17
     7ea:	80 7f       	andi	r24, 0xF0	; 240
     7ec:	89 2b       	or	r24, r25
     7ee:	51 96       	adiw	r26, 0x11	; 17
     7f0:	8c 93       	st	X, r24
     7f2:	51 97       	sbiw	r26, 0x11	; 17
  frame->header.nwkDstEndpoint = req->dstEndpoint;
     7f4:	9f 81       	ldd	r25, Y+7	; 0x07
     7f6:	92 95       	swap	r25
     7f8:	90 7f       	andi	r25, 0xF0	; 240
     7fa:	8f 70       	andi	r24, 0x0F	; 15
     7fc:	89 2b       	or	r24, r25
     7fe:	51 96       	adiw	r26, 0x11	; 17
     800:	8c 93       	st	X, r24

  memcpy(frame->payload, req->data, req->size);
     802:	f8 01       	movw	r30, r16
     804:	ef 57       	subi	r30, 0x7F	; 127
     806:	ff 4f       	sbci	r31, 0xFF	; 255
     808:	4c 85       	ldd	r20, Y+12	; 0x0c
     80a:	50 e0       	ldi	r21, 0x00	; 0
     80c:	6a 85       	ldd	r22, Y+10	; 0x0a
     80e:	7b 85       	ldd	r23, Y+11	; 0x0b
     810:	80 81       	ld	r24, Z
     812:	91 81       	ldd	r25, Z+1	; 0x01
     814:	0e 94 12 0c 	call	0x1824	; 0x1824 <memcpy>
  frame->size += req->size;
     818:	f8 01       	movw	r30, r16
     81a:	91 81       	ldd	r25, Z+1	; 0x01
     81c:	8c 85       	ldd	r24, Y+12	; 0x0c
     81e:	89 0f       	add	r24, r25
     820:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(frame);
     822:	c8 01       	movw	r24, r16
     824:	ef d3       	rcall	.+2014   	; 0x1004 <nwkTxFrame>
     826:	26 c0       	rjmp	.+76     	; 0x874 <nwkDataReqTaskHandler+0x13c>
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
     828:	ec 17       	cp	r30, r28
     82a:	fd 07       	cpc	r31, r29
     82c:	41 f4       	brne	.+16     	; 0x83e <nwkDataReqTaskHandler+0x106>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
     82e:	80 81       	ld	r24, Z
     830:	91 81       	ldd	r25, Z+1	; 0x01
     832:	90 93 39 06 	sts	0x0639, r25	; 0x800639 <nwkDataReqQueue+0x1>
     836:	80 93 38 06 	sts	0x0638, r24	; 0x800638 <nwkDataReqQueue>
     83a:	0a c0       	rjmp	.+20     	; 0x850 <nwkDataReqTaskHandler+0x118>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
     83c:	fc 01       	movw	r30, r24
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
     83e:	80 81       	ld	r24, Z
     840:	91 81       	ldd	r25, Z+1	; 0x01
     842:	8c 17       	cp	r24, r28
     844:	9d 07       	cpc	r25, r29
     846:	d1 f7       	brne	.-12     	; 0x83c <nwkDataReqTaskHandler+0x104>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
     848:	88 81       	ld	r24, Y
     84a:	99 81       	ldd	r25, Y+1	; 0x01
     84c:	91 83       	std	Z+1, r25	; 0x01
     84e:	80 83       	st	Z, r24
  }

  nwkIb.lock--;
     850:	ea ed       	ldi	r30, 0xDA	; 218
     852:	f9 e1       	ldi	r31, 0x19	; 25
     854:	86 a1       	ldd	r24, Z+38	; 0x26
     856:	97 a1       	ldd	r25, Z+39	; 0x27
     858:	01 97       	sbiw	r24, 0x01	; 1
     85a:	97 a3       	std	Z+39, r25	; 0x27
     85c:	86 a3       	std	Z+38, r24	; 0x26
  req->confirm(req);
     85e:	ed 85       	ldd	r30, Y+13	; 0x0d
     860:	fe 85       	ldd	r31, Y+14	; 0x0e
     862:	ce 01       	movw	r24, r28
     864:	19 95       	eicall
     866:	06 c0       	rjmp	.+12     	; 0x874 <nwkDataReqTaskHandler+0x13c>
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     868:	09 90       	ld	r0, Y+
     86a:	d8 81       	ld	r29, Y
     86c:	c0 2d       	mov	r28, r0
     86e:	20 97       	sbiw	r28, 0x00	; 0
     870:	09 f0       	breq	.+2      	; 0x874 <nwkDataReqTaskHandler+0x13c>
     872:	6e cf       	rjmp	.-292    	; 0x750 <nwkDataReqTaskHandler+0x18>

      default:
        break;
    };
  }
}
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
     878:	1f 91       	pop	r17
     87a:	0f 91       	pop	r16
     87c:	08 95       	ret

0000087e <nwkFrameInit>:

/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
     87e:	ea e3       	ldi	r30, 0x3A	; 58
     880:	f6 e0       	ldi	r31, 0x06	; 6
     882:	88 e4       	ldi	r24, 0x48	; 72
     884:	96 e1       	ldi	r25, 0x16	; 22
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
     886:	10 82       	st	Z, r1
     888:	e7 57       	subi	r30, 0x77	; 119
     88a:	ff 4f       	sbci	r31, 0xFF	; 255
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     88c:	e8 17       	cp	r30, r24
     88e:	f9 07       	cpc	r31, r25
     890:	d1 f7       	brne	.-12     	; 0x886 <nwkFrameInit+0x8>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
}
     892:	08 95       	ret

00000894 <nwkFrameAlloc>:
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
     894:	80 91 3a 06 	lds	r24, 0x063A	; 0x80063a <nwkFrameFrames>
     898:	88 23       	and	r24, r24
     89a:	59 f0       	breq	.+22     	; 0x8b2 <nwkFrameAlloc+0x1e>
     89c:	e3 ec       	ldi	r30, 0xC3	; 195
     89e:	f6 e0       	ldi	r31, 0x06	; 6
     8a0:	68 e4       	ldi	r22, 0x48	; 72
     8a2:	76 e1       	ldi	r23, 0x16	; 22
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	ac 01       	movw	r20, r24
     8aa:	20 81       	ld	r18, Z
     8ac:	21 11       	cpse	r18, r1
     8ae:	22 c0       	rjmp	.+68     	; 0x8f4 <nwkFrameAlloc+0x60>
     8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <nwkFrameAlloc+0x22>
     8b2:	40 e0       	ldi	r20, 0x00	; 0
     8b4:	50 e0       	ldi	r21, 0x00	; 0
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
     8b6:	69 e8       	ldi	r22, 0x89	; 137
     8b8:	64 9f       	mul	r22, r20
     8ba:	90 01       	movw	r18, r0
     8bc:	65 9f       	mul	r22, r21
     8be:	30 0d       	add	r19, r0
     8c0:	11 24       	eor	r1, r1
     8c2:	c9 01       	movw	r24, r18
     8c4:	86 5c       	subi	r24, 0xC6	; 198
     8c6:	99 4f       	sbci	r25, 0xF9	; 249
     8c8:	fc 01       	movw	r30, r24
     8ca:	11 92       	st	Z+, r1
     8cc:	6a 95       	dec	r22
     8ce:	e9 f7       	brne	.-6      	; 0x8ca <nwkFrameAlloc+0x36>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
     8d0:	40 e1       	ldi	r20, 0x10	; 16
     8d2:	fc 01       	movw	r30, r24
     8d4:	41 83       	std	Z+1, r20	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
     8d6:	ef 57       	subi	r30, 0x7F	; 127
     8d8:	ff 4f       	sbci	r31, 0xFF	; 255
     8da:	24 5b       	subi	r18, 0xB4	; 180
     8dc:	39 4f       	sbci	r19, 0xF9	; 249
     8de:	31 83       	std	Z+1, r19	; 0x01
     8e0:	20 83       	st	Z, r18
      nwkIb.lock++;
     8e2:	ea ed       	ldi	r30, 0xDA	; 218
     8e4:	f9 e1       	ldi	r31, 0x19	; 25
     8e6:	26 a1       	ldd	r18, Z+38	; 0x26
     8e8:	37 a1       	ldd	r19, Z+39	; 0x27
     8ea:	2f 5f       	subi	r18, 0xFF	; 255
     8ec:	3f 4f       	sbci	r19, 0xFF	; 255
     8ee:	37 a3       	std	Z+39, r19	; 0x27
     8f0:	26 a3       	std	Z+38, r18	; 0x26
      return &nwkFrameFrames[i];
     8f2:	08 95       	ret
     8f4:	01 96       	adiw	r24, 0x01	; 1
     8f6:	e7 57       	subi	r30, 0x77	; 119
     8f8:	ff 4f       	sbci	r31, 0xFF	; 255
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     8fa:	e6 17       	cp	r30, r22
     8fc:	f7 07       	cpc	r31, r23
     8fe:	a1 f6       	brne	.-88     	; 0x8a8 <nwkFrameAlloc+0x14>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	90 e0       	ldi	r25, 0x00	; 0
}
     904:	08 95       	ret

00000906 <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
     906:	fc 01       	movw	r30, r24
     908:	10 82       	st	Z, r1
  nwkIb.lock--;
     90a:	ea ed       	ldi	r30, 0xDA	; 218
     90c:	f9 e1       	ldi	r31, 0x19	; 25
     90e:	86 a1       	ldd	r24, Z+38	; 0x26
     910:	97 a1       	ldd	r25, Z+39	; 0x27
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	97 a3       	std	Z+39, r25	; 0x27
     916:	86 a3       	std	Z+38, r24	; 0x26
     918:	08 95       	ret

0000091a <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
     91a:	00 97       	sbiw	r24, 0x00	; 0
     91c:	41 f0       	breq	.+16     	; 0x92e <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
     91e:	fc 01       	movw	r30, r24
     920:	e7 57       	subi	r30, 0x77	; 119
     922:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     924:	86 e1       	ldi	r24, 0x16	; 22
     926:	e8 34       	cpi	r30, 0x48	; 72
     928:	f8 07       	cpc	r31, r24
     92a:	18 f0       	brcs	.+6      	; 0x932 <nwkFrameNext+0x18>
     92c:	12 c0       	rjmp	.+36     	; 0x952 <nwkFrameNext+0x38>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
     92e:	ea e3       	ldi	r30, 0x3A	; 58
     930:	f6 e0       	ldi	r31, 0x06	; 6
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     932:	80 81       	ld	r24, Z
     934:	88 23       	and	r24, r24
     936:	21 f0       	breq	.+8      	; 0x940 <nwkFrameNext+0x26>
     938:	0f c0       	rjmp	.+30     	; 0x958 <nwkFrameNext+0x3e>
     93a:	80 81       	ld	r24, Z
     93c:	81 11       	cpse	r24, r1
     93e:	0f c0       	rjmp	.+30     	; 0x95e <nwkFrameNext+0x44>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     940:	e7 57       	subi	r30, 0x77	; 119
     942:	ff 4f       	sbci	r31, 0xFF	; 255
     944:	86 e1       	ldi	r24, 0x16	; 22
     946:	e8 34       	cpi	r30, 0x48	; 72
     948:	f8 07       	cpc	r31, r24
     94a:	b8 f3       	brcs	.-18     	; 0x93a <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	08 95       	ret
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	08 95       	ret
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     958:	8e 2f       	mov	r24, r30
     95a:	9f 2f       	mov	r25, r31
     95c:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     95e:	8e 2f       	mov	r24, r30
     960:	9f 2f       	mov	r25, r31
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
}
     962:	08 95       	ret

00000964 <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
     964:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
     966:	dc 01       	movw	r26, r24
     968:	ad 57       	subi	r26, 0x7D	; 125
     96a:	bf 4f       	sbci	r27, 0xFF	; 255
     96c:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     96e:	aa ed       	ldi	r26, 0xDA	; 218
     970:	b9 e1       	ldi	r27, 0x19	; 25
     972:	14 96       	adiw	r26, 0x04	; 4
     974:	9c 91       	ld	r25, X
     976:	14 97       	sbiw	r26, 0x04	; 4
     978:	9f 5f       	subi	r25, 0xFF	; 255
     97a:	14 96       	adiw	r26, 0x04	; 4
     97c:	9c 93       	st	X, r25
     97e:	14 97       	sbiw	r26, 0x04	; 4
     980:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
     982:	8d 91       	ld	r24, X+
     984:	9c 91       	ld	r25, X
     986:	96 87       	std	Z+14, r25	; 0x0e
     988:	85 87       	std	Z+13, r24	; 0x0d
     98a:	08 95       	ret

0000098c <nwkRouteInit>:

  entry->lqi = frame->rx.lqi;
#else
  (void)frame;
#endif
}
     98c:	a9 e4       	ldi	r26, 0x49	; 73
     98e:	b6 e1       	ldi	r27, 0x16	; 22
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	4f ef       	ldi	r20, 0xFF	; 255
     996:	5f ef       	ldi	r21, 0xFF	; 255
     998:	11 96       	adiw	r26, 0x01	; 1
     99a:	5c 93       	st	X, r21
     99c:	4e 93       	st	-X, r20
     99e:	fc 01       	movw	r30, r24
     9a0:	ee 0f       	add	r30, r30
     9a2:	ff 1f       	adc	r31, r31
     9a4:	ee 0f       	add	r30, r30
     9a6:	ff 1f       	adc	r31, r31
     9a8:	ee 0f       	add	r30, r30
     9aa:	ff 1f       	adc	r31, r31
     9ac:	e8 1b       	sub	r30, r24
     9ae:	f9 0b       	sbc	r31, r25
     9b0:	e8 5b       	subi	r30, 0xB8	; 184
     9b2:	f9 4e       	sbci	r31, 0xE9	; 233
     9b4:	20 81       	ld	r18, Z
     9b6:	2e 7f       	andi	r18, 0xFE	; 254
     9b8:	20 83       	st	Z, r18
     9ba:	14 96       	adiw	r26, 0x04	; 4
     9bc:	1c 92       	st	X, r1
     9be:	14 97       	sbiw	r26, 0x04	; 4
     9c0:	01 96       	adiw	r24, 0x01	; 1
     9c2:	17 96       	adiw	r26, 0x07	; 7
     9c4:	84 36       	cpi	r24, 0x64	; 100
     9c6:	91 05       	cpc	r25, r1
     9c8:	39 f7       	brne	.-50     	; 0x998 <nwkRouteInit+0xc>
     9ca:	08 95       	ret

000009cc <NWK_RouteFindEntry>:
     9cc:	0f 93       	push	r16
     9ce:	1f 93       	push	r17
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
     9d4:	e9 e4       	ldi	r30, 0x49	; 73
     9d6:	f6 e1       	ldi	r31, 0x16	; 22
     9d8:	20 e0       	ldi	r18, 0x00	; 0
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	06 2f       	mov	r16, r22
     9de:	10 e0       	ldi	r17, 0x00	; 0
     9e0:	40 81       	ld	r20, Z
     9e2:	51 81       	ldd	r21, Z+1	; 0x01
     9e4:	48 17       	cp	r20, r24
     9e6:	59 07       	cpc	r21, r25
     9e8:	b1 f4       	brne	.+44     	; 0xa16 <NWK_RouteFindEntry+0x4a>
     9ea:	d9 01       	movw	r26, r18
     9ec:	aa 0f       	add	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	aa 0f       	add	r26, r26
     9f2:	bb 1f       	adc	r27, r27
     9f4:	aa 0f       	add	r26, r26
     9f6:	bb 1f       	adc	r27, r27
     9f8:	a2 1b       	sub	r26, r18
     9fa:	b3 0b       	sbc	r27, r19
     9fc:	a8 5b       	subi	r26, 0xB8	; 184
     9fe:	b9 4e       	sbci	r27, 0xE9	; 233
     a00:	4c 91       	ld	r20, X
     a02:	46 95       	lsr	r20
     a04:	41 70       	andi	r20, 0x01	; 1
     a06:	c4 2f       	mov	r28, r20
     a08:	40 e0       	ldi	r20, 0x00	; 0
     a0a:	d4 2f       	mov	r29, r20
     a0c:	c0 17       	cp	r28, r16
     a0e:	d1 07       	cpc	r29, r17
     a10:	11 f4       	brne	.+4      	; 0xa16 <NWK_RouteFindEntry+0x4a>
     a12:	cd 01       	movw	r24, r26
     a14:	08 c0       	rjmp	.+16     	; 0xa26 <NWK_RouteFindEntry+0x5a>
     a16:	2f 5f       	subi	r18, 0xFF	; 255
     a18:	3f 4f       	sbci	r19, 0xFF	; 255
     a1a:	37 96       	adiw	r30, 0x07	; 7
     a1c:	24 36       	cpi	r18, 0x64	; 100
     a1e:	31 05       	cpc	r19, r1
     a20:	f9 f6       	brne	.-66     	; 0x9e0 <NWK_RouteFindEntry+0x14>
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	df 91       	pop	r29
     a28:	cf 91       	pop	r28
     a2a:	1f 91       	pop	r17
     a2c:	0f 91       	pop	r16
     a2e:	08 95       	ret

00000a30 <NWK_RouteFreeEntry>:
     a30:	fc 01       	movw	r30, r24
     a32:	80 81       	ld	r24, Z
     a34:	80 fd       	sbrc	r24, 0
     a36:	05 c0       	rjmp	.+10     	; 0xa42 <NWK_RouteFreeEntry+0x12>
     a38:	8f ef       	ldi	r24, 0xFF	; 255
     a3a:	9f ef       	ldi	r25, 0xFF	; 255
     a3c:	92 83       	std	Z+2, r25	; 0x02
     a3e:	81 83       	std	Z+1, r24	; 0x01
     a40:	15 82       	std	Z+5, r1	; 0x05
     a42:	08 95       	ret

00000a44 <NWK_RouteNextHop>:
     a44:	c3 df       	rcall	.-122    	; 0x9cc <NWK_RouteFindEntry>
     a46:	00 97       	sbiw	r24, 0x00	; 0
     a48:	21 f0       	breq	.+8      	; 0xa52 <NWK_RouteNextHop+0xe>
     a4a:	fc 01       	movw	r30, r24
     a4c:	83 81       	ldd	r24, Z+3	; 0x03
     a4e:	94 81       	ldd	r25, Z+4	; 0x04
     a50:	08 95       	ret
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	9f ef       	ldi	r25, 0xFF	; 255
     a56:	08 95       	ret

00000a58 <nwkRouteRemove>:
     a58:	b9 df       	rcall	.-142    	; 0x9cc <NWK_RouteFindEntry>
     a5a:	00 97       	sbiw	r24, 0x00	; 0
     a5c:	09 f0       	breq	.+2      	; 0xa60 <nwkRouteRemove+0x8>
     a5e:	e8 cf       	rjmp	.-48     	; 0xa30 <NWK_RouteFreeEntry>
     a60:	08 95       	ret

00000a62 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	fc 01       	movw	r30, r24
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
     a68:	87 85       	ldd	r24, Z+15	; 0x0f
     a6a:	90 89       	ldd	r25, Z+16	; 0x10
     a6c:	8f 3f       	cpi	r24, 0xFF	; 255
     a6e:	2f ef       	ldi	r18, 0xFF	; 255
     a70:	92 07       	cpc	r25, r18
     a72:	d9 f1       	breq	.+118    	; 0xaea <nwkRouteFrameSent+0x88>
     a74:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);
     a76:	63 85       	ldd	r22, Z+11	; 0x0b
     a78:	63 fb       	bst	r22, 3
     a7a:	66 27       	eor	r22, r22
     a7c:	60 f9       	bld	r22, 0
     a7e:	a6 df       	rcall	.-180    	; 0x9cc <NWK_RouteFindEntry>
     a80:	dc 01       	movw	r26, r24

  if (NULL == entry || entry->fixed)
     a82:	89 2b       	or	r24, r25
     a84:	91 f1       	breq	.+100    	; 0xaea <nwkRouteFrameSent+0x88>
     a86:	8c 91       	ld	r24, X
     a88:	80 fd       	sbrc	r24, 0
     a8a:	2f c0       	rjmp	.+94     	; 0xaea <nwkRouteFrameSent+0x88>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
     a8c:	fe 01       	movw	r30, r28
     a8e:	ed 57       	subi	r30, 0x7D	; 125
     a90:	ff 4f       	sbci	r31, 0xFF	; 255
     a92:	80 81       	ld	r24, Z
     a94:	81 11       	cpse	r24, r1
     a96:	19 c0       	rjmp	.+50     	; 0xaca <nwkRouteFrameSent+0x68>
  {
    entry->score = NWK_ROUTE_DEFAULT_SCORE;
     a98:	8c 91       	ld	r24, X
     a9a:	8f 70       	andi	r24, 0x0F	; 15
     a9c:	80 63       	ori	r24, 0x30	; 48
     a9e:	8c 93       	st	X, r24

    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
     aa0:	15 96       	adiw	r26, 0x05	; 5
     aa2:	8c 91       	ld	r24, X
     aa4:	15 97       	sbiw	r26, 0x05	; 5
     aa6:	8f 5f       	subi	r24, 0xFF	; 255
     aa8:	15 96       	adiw	r26, 0x05	; 5
     aaa:	8c 93       	st	X, r24
     aac:	8f 3f       	cpi	r24, 0xFF	; 255
     aae:	e9 f4       	brne	.+58     	; 0xaea <nwkRouteFrameSent+0x88>
     ab0:	ed e4       	ldi	r30, 0x4D	; 77
     ab2:	f6 e1       	ldi	r31, 0x16	; 22
     ab4:	29 e0       	ldi	r18, 0x09	; 9
     ab6:	39 e1       	ldi	r19, 0x19	; 25
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
     ab8:	80 81       	ld	r24, Z
     aba:	86 95       	lsr	r24
     abc:	8f 5f       	subi	r24, 0xFF	; 255
     abe:	80 83       	st	Z, r24
     ac0:	37 96       	adiw	r30, 0x07	; 7

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
     ac2:	e2 17       	cp	r30, r18
     ac4:	f3 07       	cpc	r31, r19
     ac6:	c1 f7       	brne	.-16     	; 0xab8 <nwkRouteFrameSent+0x56>
     ac8:	10 c0       	rjmp	.+32     	; 0xaea <nwkRouteFrameSent+0x88>
    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
      nwkRouteNormalizeRanks();
  }
  else
  {
    if (0 == --entry->score)
     aca:	9c 91       	ld	r25, X
     acc:	89 2f       	mov	r24, r25
     ace:	82 95       	swap	r24
     ad0:	8f 70       	andi	r24, 0x0F	; 15
     ad2:	81 5f       	subi	r24, 0xF1	; 241
     ad4:	8f 70       	andi	r24, 0x0F	; 15
     ad6:	28 2f       	mov	r18, r24
     ad8:	22 95       	swap	r18
     ada:	20 7f       	andi	r18, 0xF0	; 240
     adc:	9f 70       	andi	r25, 0x0F	; 15
     ade:	92 2b       	or	r25, r18
     ae0:	9c 93       	st	X, r25
     ae2:	81 11       	cpse	r24, r1
     ae4:	02 c0       	rjmp	.+4      	; 0xaea <nwkRouteFrameSent+0x88>
      NWK_RouteFreeEntry(entry);
     ae6:	cd 01       	movw	r24, r26
     ae8:	a3 df       	rcall	.-186    	; 0xa30 <NWK_RouteFreeEntry>
  }
}
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	08 95       	ret

00000af0 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
     af4:	fc 01       	movw	r30, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
     af6:	87 85       	ldd	r24, Z+15	; 0x0f
     af8:	90 89       	ldd	r25, Z+16	; 0x10
     afa:	8f 3f       	cpi	r24, 0xFF	; 255
     afc:	2f ef       	ldi	r18, 0xFF	; 255
     afe:	92 07       	cpc	r25, r18
     b00:	29 f4       	brne	.+10     	; 0xb0c <nwkRoutePrepareTx+0x1c>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
     b02:	8f ef       	ldi	r24, 0xFF	; 255
     b04:	9f ef       	ldi	r25, 0xFF	; 255
     b06:	90 87       	std	Z+8, r25	; 0x08
     b08:	87 83       	std	Z+7, r24	; 0x07
     b0a:	0e c0       	rjmp	.+28     	; 0xb28 <nwkRoutePrepareTx+0x38>
  }

  else if (header->nwkFcf.linkLocal)
     b0c:	23 85       	ldd	r18, Z+11	; 0x0b
     b0e:	22 ff       	sbrs	r18, 2
     b10:	03 c0       	rjmp	.+6      	; 0xb18 <nwkRoutePrepareTx+0x28>
  {
    header->macDstAddr = header->nwkDstAddr;
     b12:	90 87       	std	Z+8, r25	; 0x08
     b14:	87 83       	std	Z+7, r24	; 0x07
     b16:	08 c0       	rjmp	.+16     	; 0xb28 <nwkRoutePrepareTx+0x38>
     b18:	ef 01       	movw	r28, r30
  }
#endif

  else
  {
    header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast);
     b1a:	63 85       	ldd	r22, Z+11	; 0x0b
     b1c:	63 fb       	bst	r22, 3
     b1e:	66 27       	eor	r22, r22
     b20:	60 f9       	bld	r22, 0
     b22:	90 df       	rcall	.-224    	; 0xa44 <NWK_RouteNextHop>
     b24:	98 87       	std	Y+8, r25	; 0x08
     b26:	8f 83       	std	Y+7, r24	; 0x07
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
     b28:	df 91       	pop	r29
     b2a:	cf 91       	pop	r28
     b2c:	08 95       	ret

00000b2e <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
     b2e:	af 92       	push	r10
     b30:	bf 92       	push	r11
     b32:	cf 92       	push	r12
     b34:	df 92       	push	r13
     b36:	ef 92       	push	r14
     b38:	ff 92       	push	r15
     b3a:	1f 93       	push	r17
     b3c:	cf 93       	push	r28
     b3e:	df 93       	push	r29
     b40:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_ROUTE_UNKNOWN != NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast))
     b42:	1b 85       	ldd	r17, Y+11	; 0x0b
     b44:	13 fb       	bst	r17, 3
     b46:	11 27       	eor	r17, r17
     b48:	10 f9       	bld	r17, 0
     b4a:	cf 84       	ldd	r12, Y+15	; 0x0f
     b4c:	d8 88       	ldd	r13, Y+16	; 0x10
     b4e:	61 2f       	mov	r22, r17
     b50:	c6 01       	movw	r24, r12
     b52:	78 df       	rcall	.-272    	; 0xa44 <NWK_RouteNextHop>
     b54:	01 96       	adiw	r24, 0x01	; 1
     b56:	59 f0       	breq	.+22     	; 0xb6e <nwkRouteFrame+0x40>
  {
    frame->tx.confirm = NULL;
     b58:	fe 01       	movw	r30, r28
     b5a:	e9 57       	subi	r30, 0x79	; 121
     b5c:	ff 4f       	sbci	r31, 0xFF	; 255
     b5e:	11 82       	std	Z+1, r1	; 0x01
     b60:	10 82       	st	Z, r1
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
     b62:	31 97       	sbiw	r30, 0x01	; 1
     b64:	82 e0       	ldi	r24, 0x02	; 2
     b66:	80 83       	st	Z, r24
    nwkTxFrame(frame);
     b68:	ce 01       	movw	r24, r28
     b6a:	4c d2       	rcall	.+1176   	; 0x1004 <nwkTxFrame>
     b6c:	22 c0       	rjmp	.+68     	; 0xbb2 <nwkRouteFrame+0x84>
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
     b6e:	ad 84       	ldd	r10, Y+13	; 0x0d
static void nwkRouteSendRouteError(uint16_t src, uint16_t dst, uint8_t multicast)
{
  NwkFrame_t *frame;
  NwkCommandRouteError_t *command;

  if (NULL == (frame = nwkFrameAlloc()))
     b70:	be 84       	ldd	r11, Y+14	; 0x0e
     b72:	90 de       	rcall	.-736    	; 0x894 <nwkFrameAlloc>
     b74:	7c 01       	movw	r14, r24
     b76:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(frame);
     b78:	d1 f0       	breq	.+52     	; 0xbae <nwkRouteFrame+0x80>
     b7a:	f4 de       	rcall	.-536    	; 0x964 <nwkFrameCommandInit>

  frame->size += sizeof(NwkCommandRouteError_t);
     b7c:	f7 01       	movw	r30, r14
     b7e:	81 81       	ldd	r24, Z+1	; 0x01
     b80:	8a 5f       	subi	r24, 0xFA	; 250
     b82:	81 83       	std	Z+1, r24	; 0x01
  frame->tx.confirm = NULL;
     b84:	e9 57       	subi	r30, 0x79	; 121
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	11 82       	std	Z+1, r1	; 0x01
     b8a:	10 82       	st	Z, r1

  frame->header.nwkDstAddr = src;
     b8c:	f7 01       	movw	r30, r14
     b8e:	b0 8a       	std	Z+16, r11	; 0x10
     b90:	a7 86       	std	Z+15, r10	; 0x0f

  command = (NwkCommandRouteError_t *)frame->payload;
     b92:	ef 57       	subi	r30, 0x7F	; 127
     b94:	ff 4f       	sbci	r31, 0xFF	; 255
     b96:	01 90       	ld	r0, Z+
     b98:	f0 81       	ld	r31, Z
     b9a:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ROUTE_ERROR;
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	80 83       	st	Z, r24
  command->srcAddr = src;
     ba0:	b2 82       	std	Z+2, r11	; 0x02
     ba2:	a1 82       	std	Z+1, r10	; 0x01
  command->dstAddr = dst;
     ba4:	d4 82       	std	Z+4, r13	; 0x04
  command->multicast = multicast;

  nwkTxFrame(frame);
     ba6:	c3 82       	std	Z+3, r12	; 0x03
     ba8:	15 83       	std	Z+5, r17	; 0x05
     baa:	c7 01       	movw	r24, r14
    nwkTxFrame(frame);
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    nwkFrameFree(frame);
     bac:	2b d2       	rcall	.+1110   	; 0x1004 <nwkTxFrame>
     bae:	ce 01       	movw	r24, r28
     bb0:	aa de       	rcall	.-684    	; 0x906 <nwkFrameFree>
  }
}
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	1f 91       	pop	r17
     bb8:	ff 90       	pop	r15
     bba:	ef 90       	pop	r14
     bbc:	df 90       	pop	r13
     bbe:	cf 90       	pop	r12
     bc0:	bf 90       	pop	r11
     bc2:	af 90       	pop	r10
     bc4:	08 95       	ret

00000bc6 <nwkRouteErrorReceived>:
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
     bc6:	fc 01       	movw	r30, r24
     bc8:	21 85       	ldd	r18, Z+9	; 0x09
     bca:	26 30       	cpi	r18, 0x06	; 6
     bcc:	49 f4       	brne	.+18     	; 0xbe0 <nwkRouteErrorReceived+0x1a>

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
     bce:	07 80       	ldd	r0, Z+7	; 0x07
     bd0:	f0 85       	ldd	r31, Z+8	; 0x08
     bd2:	e0 2d       	mov	r30, r0

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;

  nwkRouteRemove(command->dstAddr, command->multicast);
     bd4:	65 81       	ldd	r22, Z+5	; 0x05
     bd6:	83 81       	ldd	r24, Z+3	; 0x03
     bd8:	94 81       	ldd	r25, Z+4	; 0x04
     bda:	3e df       	rcall	.-388    	; 0xa58 <nwkRouteRemove>

  return true;
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;
     be0:	80 e0       	ldi	r24, 0x00	; 0

  nwkRouteRemove(command->dstAddr, command->multicast);

  return true;
}
     be2:	08 95       	ret

00000be4 <nwkRxServiceDataInd>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
     be4:	dc 01       	movw	r26, r24
     be6:	19 96       	adiw	r26, 0x09	; 9
     be8:	2c 91       	ld	r18, X
     bea:	19 97       	sbiw	r26, 0x09	; 9
     bec:	22 23       	and	r18, r18
     bee:	71 f0       	breq	.+28     	; 0xc0c <nwkRxServiceDataInd+0x28>
     bf0:	17 96       	adiw	r26, 0x07	; 7
     bf2:	ed 91       	ld	r30, X+
     bf4:	fc 91       	ld	r31, X
     bf6:	18 97       	sbiw	r26, 0x08	; 8
     bf8:	20 81       	ld	r18, Z
     bfa:	22 23       	and	r18, r18
     bfc:	19 f0       	breq	.+6      	; 0xc04 <nwkRxServiceDataInd+0x20>
     bfe:	21 30       	cpi	r18, 0x01	; 1
     c00:	19 f0       	breq	.+6      	; 0xc08 <nwkRxServiceDataInd+0x24>
     c02:	06 c0       	rjmp	.+12     	; 0xc10 <nwkRxServiceDataInd+0x2c>
     c04:	4d c2       	rjmp	.+1178   	; 0x10a0 <nwkTxAckReceived>
     c06:	08 95       	ret
     c08:	de cf       	rjmp	.-68     	; 0xbc6 <nwkRouteErrorReceived>
     c0a:	08 95       	ret
     c0c:	80 e0       	ldi	r24, 0x00	; 0
     c0e:	08 95       	ret
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	08 95       	ret

00000c14 <nwkRxInit>:
     c14:	e9 e0       	ldi	r30, 0x09	; 9
     c16:	f9 e1       	ldi	r31, 0x19	; 25
     c18:	8b e3       	ldi	r24, 0x3B	; 59
     c1a:	99 e1       	ldi	r25, 0x19	; 25
     c1c:	10 82       	st	Z, r1
     c1e:	35 96       	adiw	r30, 0x05	; 5
     c20:	e8 17       	cp	r30, r24
     c22:	f9 07       	cpc	r31, r25
     c24:	d9 f7       	brne	.-10     	; 0xc1c <nwkRxInit+0x8>
     c26:	62 ef       	ldi	r22, 0xF2	; 242
     c28:	75 e0       	ldi	r23, 0x05	; 5
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	2c cd       	rjmp	.-1448   	; 0x686 <NWK_OpenEndpoint>
     c2e:	08 95       	ret

00000c30 <PHY_DataInd>:
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
     c34:	dc 01       	movw	r26, r24
     c36:	ed 91       	ld	r30, X+
     c38:	fc 91       	ld	r31, X
     c3a:	11 97       	sbiw	r26, 0x01	; 1
     c3c:	21 81       	ldd	r18, Z+1	; 0x01
     c3e:	28 38       	cpi	r18, 0x88	; 136
     c40:	f1 f4       	brne	.+60     	; 0xc7e <PHY_DataInd+0x4e>
     c42:	20 81       	ld	r18, Z
     c44:	2f 7d       	andi	r18, 0xDF	; 223
     c46:	21 34       	cpi	r18, 0x41	; 65
     c48:	d1 f4       	brne	.+52     	; 0xc7e <PHY_DataInd+0x4e>
     c4a:	12 96       	adiw	r26, 0x02	; 2
     c4c:	2c 91       	ld	r18, X
     c4e:	20 31       	cpi	r18, 0x10	; 16
     c50:	b0 f0       	brcs	.+44     	; 0xc7e <PHY_DataInd+0x4e>
     c52:	ec 01       	movw	r28, r24
     c54:	1f de       	rcall	.-962    	; 0x894 <nwkFrameAlloc>
     c56:	00 97       	sbiw	r24, 0x00	; 0
     c58:	91 f0       	breq	.+36     	; 0xc7e <PHY_DataInd+0x4e>
     c5a:	20 e2       	ldi	r18, 0x20	; 32
     c5c:	fc 01       	movw	r30, r24
     c5e:	20 83       	st	Z, r18
     c60:	2a 81       	ldd	r18, Y+2	; 0x02
     c62:	21 83       	std	Z+1, r18	; 0x01
     c64:	2b 81       	ldd	r18, Y+3	; 0x03
     c66:	ed 57       	subi	r30, 0x7D	; 125
     c68:	ff 4f       	sbci	r31, 0xFF	; 255
     c6a:	20 83       	st	Z, r18
     c6c:	2c 81       	ldd	r18, Y+4	; 0x04
     c6e:	31 96       	adiw	r30, 0x01	; 1
     c70:	20 83       	st	Z, r18
     c72:	4a 81       	ldd	r20, Y+2	; 0x02
     c74:	50 e0       	ldi	r21, 0x00	; 0
     c76:	68 81       	ld	r22, Y
     c78:	79 81       	ldd	r23, Y+1	; 0x01
     c7a:	02 96       	adiw	r24, 0x02	; 2
     c7c:	d3 d5       	rcall	.+2982   	; 0x1824 <memcpy>
     c7e:	df 91       	pop	r29
     c80:	cf 91       	pop	r28
     c82:	08 95       	ret

00000c84 <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
     c84:	7f 92       	push	r7
     c86:	8f 92       	push	r8
     c88:	9f 92       	push	r9
     c8a:	af 92       	push	r10
     c8c:	bf 92       	push	r11
     c8e:	cf 92       	push	r12
     c90:	df 92       	push	r13
     c92:	ef 92       	push	r14
     c94:	ff 92       	push	r15
     c96:	0f 93       	push	r16
     c98:	1f 93       	push	r17
     c9a:	cf 93       	push	r28
     c9c:	df 93       	push	r29
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
     ca2:	2c 97       	sbiw	r28, 0x0c	; 12
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	cd bf       	out	0x3d, r28	; 61
  NwkFrame_t *frame = NULL;
     cae:	00 e0       	ldi	r16, 0x00	; 0
     cb0:	10 e0       	ldi	r17, 0x00	; 0
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
     cb2:	0f 2e       	mov	r0, r31
     cb4:	f4 e2       	ldi	r31, 0x24	; 36
     cb6:	bf 2e       	mov	r11, r31
     cb8:	f0 2d       	mov	r31, r0
    ack = true;

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
     cba:	0f 2e       	mov	r0, r31
     cbc:	fa ed       	ldi	r31, 0xDA	; 218
     cbe:	cf 2e       	mov	r12, r31
     cc0:	f9 e1       	ldi	r31, 0x19	; 25
     cc2:	df 2e       	mov	r13, r31
     cc4:	f0 2d       	mov	r31, r0
    ack = false;

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
      nwkIb.addr == frame->header.nwkDstAddr &&
      0 == frame->header.nwkFcf.multicast)
    ack = true;
     cc6:	77 24       	eor	r7, r7
     cc8:	73 94       	inc	r7
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
     cca:	68 94       	set
     ccc:	88 24       	eor	r8, r8
     cce:	84 f8       	bld	r8, 4
  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
     cd0:	68 94       	set
     cd2:	99 24       	eor	r9, r9
     cd4:	93 f8       	bld	r9, 3

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
     cd6:	68 94       	set
     cd8:	aa 24       	eor	r10, r10
     cda:	a2 f8       	bld	r10, 2
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
     cdc:	f8 c0       	rjmp	.+496    	; 0xece <nwkRxTaskHandler+0x24a>
  {
    switch (frame->state)
     cde:	d8 01       	movw	r26, r16
     ce0:	8c 91       	ld	r24, X
     ce2:	82 32       	cpi	r24, 0x22	; 34
     ce4:	29 f1       	breq	.+74     	; 0xd30 <nwkRxTaskHandler+0xac>
     ce6:	18 f4       	brcc	.+6      	; 0xcee <nwkRxTaskHandler+0x6a>
     ce8:	80 32       	cpi	r24, 0x20	; 32
     cea:	41 f0       	breq	.+16     	; 0xcfc <nwkRxTaskHandler+0x78>
     cec:	f0 c0       	rjmp	.+480    	; 0xece <nwkRxTaskHandler+0x24a>
     cee:	83 32       	cpi	r24, 0x23	; 35
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <nwkRxTaskHandler+0x70>
     cf2:	e8 c0       	rjmp	.+464    	; 0xec4 <nwkRxTaskHandler+0x240>
     cf4:	84 32       	cpi	r24, 0x24	; 36
     cf6:	09 f4       	brne	.+2      	; 0xcfa <nwkRxTaskHandler+0x76>
     cf8:	e8 c0       	rjmp	.+464    	; 0xeca <nwkRxTaskHandler+0x246>
     cfa:	e9 c0       	rjmp	.+466    	; 0xece <nwkRxTaskHandler+0x24a>
/*************************************************************************//**
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;
HAL_UartWriteByte((uint8_t)13);
     cfc:	8d e0       	ldi	r24, 0x0D	; 13
     cfe:	9d db       	rcall	.-2246   	; 0x43a <HAL_UartWriteByte>
  HAL_UartWriteByte((uint8_t)10);
     d00:	8a e0       	ldi	r24, 0x0A	; 10
     d02:	9b db       	rcall	.-2250   	; 0x43a <HAL_UartWriteByte>
  frame->state = NWK_RX_STATE_FINISH;
     d04:	f8 01       	movw	r30, r16
     d06:	b0 82       	st	Z, r11
  HAL_UartWriteByte(frame->payload[0]);
     d08:	ef 57       	subi	r30, 0x7F	; 127
     d0a:	ff 4f       	sbci	r31, 0xFF	; 255
     d0c:	01 90       	ld	r0, Z+
     d0e:	f0 81       	ld	r31, Z
     d10:	e0 2d       	mov	r30, r0
     d12:	80 81       	ld	r24, Z
  HAL_UartWriteByte((uint8_t)13);
     d14:	92 db       	rcall	.-2268   	; 0x43a <HAL_UartWriteByte>
     d16:	8d e0       	ldi	r24, 0x0D	; 13
  HAL_UartWriteByte((uint8_t)10);
     d18:	90 db       	rcall	.-2272   	; 0x43a <HAL_UartWriteByte>
     d1a:	8a e0       	ldi	r24, 0x0A	; 10
  HAL_UartWriteByte((uint8_t)(header->nwkDstAddr));
     d1c:	8e db       	rcall	.-2276   	; 0x43a <HAL_UartWriteByte>
     d1e:	d8 01       	movw	r26, r16
     d20:	1f 96       	adiw	r26, 0x0f	; 15
  HAL_UartWriteByte((uint8_t)13);
     d22:	8c 91       	ld	r24, X
     d24:	8a db       	rcall	.-2284   	; 0x43a <HAL_UartWriteByte>
     d26:	8d e0       	ldi	r24, 0x0D	; 13
  HAL_UartWriteByte((uint8_t)10);
     d28:	88 db       	rcall	.-2288   	; 0x43a <HAL_UartWriteByte>
     d2a:	8a e0       	ldi	r24, 0x0A	; 10
     d2c:	86 db       	rcall	.-2292   	; 0x43a <HAL_UartWriteByte>
     d2e:	cf c0       	rjmp	.+414    	; 0xece <nwkRxTaskHandler+0x24a>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
  bool ack;

  nwkRxAckControl = 0;
     d30:	10 92 04 19 	sts	0x1904, r1	; 0x801904 <nwkRxAckControl>
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
     d34:	f8 01       	movw	r30, r16
     d36:	81 89       	ldd	r24, Z+17	; 0x11
     d38:	82 95       	swap	r24
     d3a:	8f 70       	andi	r24, 0x0F	; 15
     d3c:	e8 2f       	mov	r30, r24
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	ee 0f       	add	r30, r30
     d42:	ff 1f       	adc	r31, r31
     d44:	e0 52       	subi	r30, 0x20	; 32
     d46:	f6 4e       	sbci	r31, 0xE6	; 230
     d48:	01 90       	ld	r0, Z+
     d4a:	f0 81       	ld	r31, Z
     d4c:	e0 2d       	mov	r30, r0
     d4e:	30 97       	sbiw	r30, 0x00	; 0
     d50:	09 f4       	brne	.+2      	; 0xd54 <nwkRxTaskHandler+0xd0>
     d52:	61 c0       	rjmp	.+194    	; 0xe16 <nwkRxTaskHandler+0x192>
    return false;

  ind.srcAddr = header->nwkSrcAddr;
     d54:	d8 01       	movw	r26, r16
     d56:	1d 96       	adiw	r26, 0x0d	; 13
     d58:	2d 91       	ld	r18, X+
     d5a:	3c 91       	ld	r19, X
     d5c:	1e 97       	sbiw	r26, 0x0e	; 14
     d5e:	3a 83       	std	Y+2, r19	; 0x02
     d60:	29 83       	std	Y+1, r18	; 0x01
  ind.dstAddr = header->nwkDstAddr;
     d62:	1f 96       	adiw	r26, 0x0f	; 15
     d64:	4d 91       	ld	r20, X+
     d66:	5c 91       	ld	r21, X
     d68:	50 97       	sbiw	r26, 0x10	; 16
     d6a:	5c 83       	std	Y+4, r21	; 0x04
     d6c:	4b 83       	std	Y+3, r20	; 0x03
  ind.srcEndpoint = header->nwkSrcEndpoint;
     d6e:	51 96       	adiw	r26, 0x11	; 17
     d70:	9c 91       	ld	r25, X
     d72:	51 97       	sbiw	r26, 0x11	; 17
     d74:	9f 70       	andi	r25, 0x0F	; 15
     d76:	9d 83       	std	Y+5, r25	; 0x05
  ind.dstEndpoint = header->nwkDstEndpoint;
     d78:	8e 83       	std	Y+6, r24	; 0x06
  ind.data = frame->payload;
     d7a:	af 57       	subi	r26, 0x7F	; 127
     d7c:	bf 4f       	sbci	r27, 0xFF	; 255
     d7e:	8d 91       	ld	r24, X+
     d80:	9c 91       	ld	r25, X
     d82:	99 87       	std	Y+9, r25	; 0x09
     d84:	88 87       	std	Y+8, r24	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
  return frame->size - (frame->payload - frame->data);
     d86:	b8 01       	movw	r22, r16
     d88:	6e 5f       	subi	r22, 0xFE	; 254
     d8a:	7f 4f       	sbci	r23, 0xFF	; 255
  ind.size = nwkFramePayloadSize(frame);
     d8c:	86 1b       	sub	r24, r22
     d8e:	97 0b       	sbc	r25, r23
     d90:	d8 01       	movw	r26, r16
     d92:	11 96       	adiw	r26, 0x01	; 1
     d94:	9c 91       	ld	r25, X
     d96:	11 97       	sbiw	r26, 0x01	; 1
     d98:	98 1b       	sub	r25, r24
     d9a:	9a 87       	std	Y+10, r25	; 0x0a
  ind.lqi = frame->rx.lqi;
     d9c:	ad 57       	subi	r26, 0x7D	; 125
     d9e:	bf 4f       	sbci	r27, 0xFF	; 255
     da0:	8c 91       	ld	r24, X
     da2:	8b 87       	std	Y+11, r24	; 0x0b
  ind.rssi = frame->rx.rssi;
     da4:	11 96       	adiw	r26, 0x01	; 1
     da6:	8c 91       	ld	r24, X
     da8:	8c 87       	std	Y+12, r24	; 0x0c

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
     daa:	d8 01       	movw	r26, r16
     dac:	1b 96       	adiw	r26, 0x0b	; 11
     dae:	9c 91       	ld	r25, X
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
     db0:	69 2f       	mov	r22, r25
     db2:	63 70       	andi	r22, 0x03	; 3
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
     db4:	92 fd       	sbrc	r25, 2
     db6:	02 c0       	rjmp	.+4      	; 0xdbc <nwkRxTaskHandler+0x138>
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	01 c0       	rjmp	.+2      	; 0xdbe <nwkRxTaskHandler+0x13a>
     dbc:	80 e2       	ldi	r24, 0x20	; 32
     dbe:	86 2b       	or	r24, r22
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
     dc0:	93 fd       	sbrc	r25, 3
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <nwkRxTaskHandler+0x144>
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	01 c0       	rjmp	.+2      	; 0xdca <nwkRxTaskHandler+0x146>
     dc8:	90 e4       	ldi	r25, 0x40	; 64
     dca:	89 2b       	or	r24, r25
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
     dcc:	4f 3f       	cpi	r20, 0xFF	; 255
     dce:	5f 4f       	sbci	r21, 0xFF	; 255
     dd0:	11 f0       	breq	.+4      	; 0xdd6 <nwkRxTaskHandler+0x152>
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	01 c0       	rjmp	.+2      	; 0xdd8 <nwkRxTaskHandler+0x154>
     dd6:	9a 2d       	mov	r25, r10
     dd8:	89 2b       	or	r24, r25
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
     dda:	d8 01       	movw	r26, r16
     ddc:	19 96       	adiw	r26, 0x09	; 9
     dde:	4d 91       	ld	r20, X+
     de0:	5c 91       	ld	r21, X
     de2:	1a 97       	sbiw	r26, 0x0a	; 10
     de4:	24 17       	cp	r18, r20
     de6:	35 07       	cpc	r19, r21
     de8:	11 f0       	breq	.+4      	; 0xdee <nwkRxTaskHandler+0x16a>
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	01 c0       	rjmp	.+2      	; 0xdf0 <nwkRxTaskHandler+0x16c>
     dee:	99 2d       	mov	r25, r9
     df0:	89 2b       	or	r24, r25
     df2:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
     df4:	d8 01       	movw	r26, r16
     df6:	15 96       	adiw	r26, 0x05	; 5
     df8:	2d 91       	ld	r18, X+
     dfa:	3c 91       	ld	r19, X
     dfc:	16 97       	sbiw	r26, 0x06	; 6
     dfe:	2f 3f       	cpi	r18, 0xFF	; 255
     e00:	3f 4f       	sbci	r19, 0xFF	; 255
     e02:	11 f0       	breq	.+4      	; 0xe08 <nwkRxTaskHandler+0x184>
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	01 c0       	rjmp	.+2      	; 0xe0a <nwkRxTaskHandler+0x186>
     e08:	98 2d       	mov	r25, r8
     e0a:	89 2b       	or	r24, r25
     e0c:	8f 83       	std	Y+7, r24	; 0x07

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
     e0e:	ce 01       	movw	r24, r28
     e10:	01 96       	adiw	r24, 0x01	; 1
     e12:	19 95       	eicall
     e14:	01 c0       	rjmp	.+2      	; 0xe18 <nwkRxTaskHandler+0x194>
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
     e16:	80 e0       	ldi	r24, 0x00	; 0
  bool ack;

  nwkRxAckControl = 0;
  ack = nwkRxIndicateFrame(frame);
  
  if (0 == frame->header.nwkFcf.ackRequest)
     e18:	f8 01       	movw	r30, r16
     e1a:	93 85       	ldd	r25, Z+11	; 0x0b
     e1c:	90 ff       	sbrs	r25, 0
    ack = false;
     e1e:	80 e0       	ldi	r24, 0x00	; 0

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
     e20:	d8 01       	movw	r26, r16
     e22:	17 96       	adiw	r26, 0x07	; 7
     e24:	2d 91       	ld	r18, X+
     e26:	3c 91       	ld	r19, X
     e28:	18 97       	sbiw	r26, 0x08	; 8
     e2a:	2f 3f       	cpi	r18, 0xFF	; 255
     e2c:	3f 4f       	sbci	r19, 0xFF	; 255
     e2e:	69 f4       	brne	.+26     	; 0xe4a <nwkRxTaskHandler+0x1c6>
     e30:	f6 01       	movw	r30, r12
     e32:	40 81       	ld	r20, Z
     e34:	51 81       	ldd	r21, Z+1	; 0x01
     e36:	d8 01       	movw	r26, r16
     e38:	1f 96       	adiw	r26, 0x0f	; 15
     e3a:	2d 91       	ld	r18, X+
     e3c:	3c 91       	ld	r19, X
     e3e:	50 97       	sbiw	r26, 0x10	; 16
     e40:	42 17       	cp	r20, r18
     e42:	53 07       	cpc	r21, r19
     e44:	11 f4       	brne	.+4      	; 0xe4a <nwkRxTaskHandler+0x1c6>
      nwkIb.addr == frame->header.nwkDstAddr &&
     e46:	93 ff       	sbrs	r25, 3
      0 == frame->header.nwkFcf.multicast)
    ack = true;
     e48:	87 2d       	mov	r24, r7

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
     e4a:	f8 01       	movw	r30, r16
     e4c:	25 81       	ldd	r18, Z+5	; 0x05
     e4e:	36 81       	ldd	r19, Z+6	; 0x06
     e50:	2f 3f       	cpi	r18, 0xFF	; 255
     e52:	3f 4f       	sbci	r19, 0xFF	; 255
     e54:	a1 f1       	breq	.+104    	; 0xebe <nwkRxTaskHandler+0x23a>
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
     e56:	d6 01       	movw	r26, r12
     e58:	2d 91       	ld	r18, X+
     e5a:	3c 91       	ld	r19, X
     e5c:	2f 3f       	cpi	r18, 0xFF	; 255
    ack = false;

  if (ack)
     e5e:	3f 4f       	sbci	r19, 0xFF	; 255
     e60:	71 f1       	breq	.+92     	; 0xebe <nwkRxTaskHandler+0x23a>
static void nwkRxSendAck(NwkFrame_t *frame)
{
  NwkFrame_t *ack;
  NwkCommandAck_t *command;

  if (NULL == (ack = nwkFrameAlloc()))
     e62:	88 23       	and	r24, r24
     e64:	61 f1       	breq	.+88     	; 0xebe <nwkRxTaskHandler+0x23a>
     e66:	16 dd       	rcall	.-1492   	; 0x894 <nwkFrameAlloc>
     e68:	7c 01       	movw	r14, r24
     e6a:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(ack);
     e6c:	41 f1       	breq	.+80     	; 0xebe <nwkRxTaskHandler+0x23a>
     e6e:	7a dd       	rcall	.-1292   	; 0x964 <nwkFrameCommandInit>

  ack->size += sizeof(NwkCommandAck_t);
     e70:	f7 01       	movw	r30, r14
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	8d 5f       	subi	r24, 0xFD	; 253
     e76:	81 83       	std	Z+1, r24	; 0x01
  ack->tx.confirm = NULL;
     e78:	e9 57       	subi	r30, 0x79	; 121
     e7a:	ff 4f       	sbci	r31, 0xFF	; 255
     e7c:	11 82       	std	Z+1, r1	; 0x01
     e7e:	10 82       	st	Z, r1

  ack->header.nwkFcf.security = frame->header.nwkFcf.security;
     e80:	d8 01       	movw	r26, r16
     e82:	1b 96       	adiw	r26, 0x0b	; 11
     e84:	8c 91       	ld	r24, X
     e86:	1b 97       	sbiw	r26, 0x0b	; 11
     e88:	86 95       	lsr	r24
     e8a:	81 70       	andi	r24, 0x01	; 1
     e8c:	f7 01       	movw	r30, r14
     e8e:	93 85       	ldd	r25, Z+11	; 0x0b
     e90:	80 fb       	bst	r24, 0
     e92:	91 f9       	bld	r25, 1
     e94:	93 87       	std	Z+11, r25	; 0x0b
  ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
     e96:	1d 96       	adiw	r26, 0x0d	; 13
     e98:	8d 91       	ld	r24, X+
     e9a:	9c 91       	ld	r25, X
     e9c:	1e 97       	sbiw	r26, 0x0e	; 14
     e9e:	90 8b       	std	Z+16, r25	; 0x10
     ea0:	87 87       	std	Z+15, r24	; 0x0f

  command = (NwkCommandAck_t *)ack->payload;
     ea2:	ef 57       	subi	r30, 0x7F	; 127
     ea4:	ff 4f       	sbci	r31, 0xFF	; 255
     ea6:	01 90       	ld	r0, Z+
     ea8:	f0 81       	ld	r31, Z
  command->id = NWK_COMMAND_ACK;
     eaa:	e0 2d       	mov	r30, r0
  command->control = nwkRxAckControl;
     eac:	10 82       	st	Z, r1
     eae:	80 91 04 19 	lds	r24, 0x1904	; 0x801904 <nwkRxAckControl>
  command->seq = frame->header.nwkSeq;
     eb2:	82 83       	std	Z+2, r24	; 0x02

  nwkTxFrame(ack);
     eb4:	1c 96       	adiw	r26, 0x0c	; 12
     eb6:	8c 91       	ld	r24, X
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
     eb8:	81 83       	std	Z+1, r24	; 0x01
     eba:	c7 01       	movw	r24, r14
     ebc:	a3 d0       	rcall	.+326    	; 0x1004 <nwkTxFrame>
      } break;

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
     ebe:	d8 01       	movw	r26, r16
     ec0:	bc 92       	st	X, r11
     ec2:	05 c0       	rjmp	.+10     	; 0xece <nwkRxTaskHandler+0x24a>
      } break;
     ec4:	c8 01       	movw	r24, r16
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
     ec6:	33 de       	rcall	.-922    	; 0xb2e <nwkRouteFrame>
     ec8:	02 c0       	rjmp	.+4      	; 0xece <nwkRxTaskHandler+0x24a>
     eca:	c8 01       	movw	r24, r16
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
     ecc:	1c dd       	rcall	.-1480   	; 0x906 <nwkFrameFree>
     ece:	c8 01       	movw	r24, r16
     ed0:	24 dd       	rcall	.-1464   	; 0x91a <nwkFrameNext>
     ed2:	8c 01       	movw	r16, r24
     ed4:	89 2b       	or	r24, r25
     ed6:	09 f0       	breq	.+2      	; 0xeda <nwkRxTaskHandler+0x256>
     ed8:	02 cf       	rjmp	.-508    	; 0xcde <nwkRxTaskHandler+0x5a>
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
     eda:	2c 96       	adiw	r28, 0x0c	; 12
     edc:	0f b6       	in	r0, 0x3f	; 63
     ede:	f8 94       	cli
     ee0:	de bf       	out	0x3e, r29	; 62
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	cd bf       	out	0x3d, r28	; 61
     ee6:	df 91       	pop	r29
     ee8:	cf 91       	pop	r28
     eea:	1f 91       	pop	r17
     eec:	0f 91       	pop	r16
     eee:	ff 90       	pop	r15
     ef0:	ef 90       	pop	r14
     ef2:	df 90       	pop	r13
     ef4:	cf 90       	pop	r12
     ef6:	bf 90       	pop	r11
     ef8:	af 90       	pop	r10
     efa:	9f 90       	pop	r9
     efc:	8f 90       	pop	r8
     efe:	7f 90       	pop	r7
     f00:	08 95       	ret

00000f02 <nwkTxDelayTimerHandler>:
/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
  frame->tx.status = status;
     f02:	ef 92       	push	r14
     f04:	ff 92       	push	r15
     f06:	0f 93       	push	r16
     f08:	1f 93       	push	r17
     f0a:	cf 93       	push	r28
     f0c:	7c 01       	movw	r14, r24
     f0e:	10 e0       	ldi	r17, 0x00	; 0
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	01 e0       	ldi	r16, 0x01	; 1
     f16:	c3 e1       	ldi	r28, 0x13	; 19
     f18:	13 c0       	rjmp	.+38     	; 0xf40 <nwkTxDelayTimerHandler+0x3e>
     f1a:	fc 01       	movw	r30, r24
     f1c:	20 81       	ld	r18, Z
     f1e:	21 31       	cpi	r18, 0x11	; 17
     f20:	79 f4       	brne	.+30     	; 0xf40 <nwkTxDelayTimerHandler+0x3e>
     f22:	ec 57       	subi	r30, 0x7C	; 124
     f24:	ff 4f       	sbci	r31, 0xFF	; 255
     f26:	20 81       	ld	r18, Z
     f28:	31 81       	ldd	r19, Z+1	; 0x01
     f2a:	21 50       	subi	r18, 0x01	; 1
     f2c:	31 09       	sbc	r19, r1
     f2e:	31 83       	std	Z+1, r19	; 0x01
     f30:	20 83       	st	Z, r18
     f32:	23 2b       	or	r18, r19
     f34:	21 f4       	brne	.+8      	; 0xf3e <nwkTxDelayTimerHandler+0x3c>
     f36:	fc 01       	movw	r30, r24
     f38:	c0 83       	st	Z, r28
     f3a:	10 2f       	mov	r17, r16
     f3c:	01 c0       	rjmp	.+2      	; 0xf40 <nwkTxDelayTimerHandler+0x3e>
     f3e:	10 2f       	mov	r17, r16
     f40:	ec dc       	rcall	.-1576   	; 0x91a <nwkFrameNext>
     f42:	00 97       	sbiw	r24, 0x00	; 0
     f44:	51 f7       	brne	.-44     	; 0xf1a <nwkTxDelayTimerHandler+0x18>
     f46:	11 23       	and	r17, r17
     f48:	11 f0       	breq	.+4      	; 0xf4e <nwkTxDelayTimerHandler+0x4c>
     f4a:	c7 01       	movw	r24, r14
     f4c:	7e d3       	rcall	.+1788   	; 0x164a <SYS_TimerStart>
     f4e:	cf 91       	pop	r28
     f50:	1f 91       	pop	r17
     f52:	0f 91       	pop	r16
     f54:	ff 90       	pop	r15
     f56:	ef 90       	pop	r14
     f58:	08 95       	ret

00000f5a <nwkTxAckWaitTimerHandler>:
     f5a:	ef 92       	push	r14
     f5c:	ff 92       	push	r15
     f5e:	0f 93       	push	r16
     f60:	1f 93       	push	r17
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
     f66:	7c 01       	movw	r14, r24
     f68:	10 e0       	ldi	r17, 0x00	; 0
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	01 e0       	ldi	r16, 0x01	; 1
     f70:	d7 e1       	ldi	r29, 0x17	; 23
     f72:	c0 e1       	ldi	r28, 0x10	; 16
     f74:	16 c0       	rjmp	.+44     	; 0xfa2 <nwkTxAckWaitTimerHandler+0x48>
     f76:	fc 01       	movw	r30, r24
     f78:	20 81       	ld	r18, Z
     f7a:	26 31       	cpi	r18, 0x16	; 22
     f7c:	91 f4       	brne	.+36     	; 0xfa2 <nwkTxAckWaitTimerHandler+0x48>
     f7e:	ec 57       	subi	r30, 0x7C	; 124
     f80:	ff 4f       	sbci	r31, 0xFF	; 255
     f82:	20 81       	ld	r18, Z
     f84:	31 81       	ldd	r19, Z+1	; 0x01
     f86:	21 50       	subi	r18, 0x01	; 1
     f88:	31 09       	sbc	r19, r1
     f8a:	31 83       	std	Z+1, r19	; 0x01
     f8c:	20 83       	st	Z, r18
     f8e:	23 2b       	or	r18, r19
     f90:	39 f4       	brne	.+14     	; 0xfa0 <nwkTxAckWaitTimerHandler+0x46>
     f92:	fc 01       	movw	r30, r24
     f94:	d0 83       	st	Z, r29
     f96:	ed 57       	subi	r30, 0x7D	; 125
     f98:	ff 4f       	sbci	r31, 0xFF	; 255
     f9a:	c0 83       	st	Z, r28
     f9c:	10 2f       	mov	r17, r16
     f9e:	01 c0       	rjmp	.+2      	; 0xfa2 <nwkTxAckWaitTimerHandler+0x48>
     fa0:	10 2f       	mov	r17, r16
     fa2:	bb dc       	rcall	.-1674   	; 0x91a <nwkFrameNext>
     fa4:	00 97       	sbiw	r24, 0x00	; 0
     fa6:	39 f7       	brne	.-50     	; 0xf76 <nwkTxAckWaitTimerHandler+0x1c>
     fa8:	11 23       	and	r17, r17
     faa:	11 f0       	breq	.+4      	; 0xfb0 <nwkTxAckWaitTimerHandler+0x56>
     fac:	c7 01       	movw	r24, r14
     fae:	4d d3       	rcall	.+1690   	; 0x164a <SYS_TimerStart>
     fb0:	df 91       	pop	r29
     fb2:	cf 91       	pop	r28
     fb4:	1f 91       	pop	r17
     fb6:	0f 91       	pop	r16
     fb8:	ff 90       	pop	r15
     fba:	ef 90       	pop	r14
     fbc:	08 95       	ret

00000fbe <nwkTxInit>:
     fbe:	10 92 52 19 	sts	0x1952, r1	; 0x801952 <nwkTxPhyActiveFrame+0x1>
     fc2:	10 92 51 19 	sts	0x1951, r1	; 0x801951 <nwkTxPhyActiveFrame>
     fc6:	e4 e4       	ldi	r30, 0x44	; 68
     fc8:	f9 e1       	ldi	r31, 0x19	; 25
     fca:	82 e3       	ldi	r24, 0x32	; 50
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	a0 e0       	ldi	r26, 0x00	; 0
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	86 83       	std	Z+6, r24	; 0x06
     fd4:	97 83       	std	Z+7, r25	; 0x07
     fd6:	a0 87       	std	Z+8, r26	; 0x08
     fd8:	b1 87       	std	Z+9, r27	; 0x09
     fda:	12 86       	std	Z+10, r1	; 0x0a
     fdc:	8d ea       	ldi	r24, 0xAD	; 173
     fde:	97 e0       	ldi	r25, 0x07	; 7
     fe0:	94 87       	std	Z+12, r25	; 0x0c
     fe2:	83 87       	std	Z+11, r24	; 0x0b
     fe4:	e7 e3       	ldi	r30, 0x37	; 55
     fe6:	f9 e1       	ldi	r31, 0x19	; 25
     fe8:	8a e0       	ldi	r24, 0x0A	; 10
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	a0 e0       	ldi	r26, 0x00	; 0
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	86 83       	std	Z+6, r24	; 0x06
     ff2:	97 83       	std	Z+7, r25	; 0x07
     ff4:	a0 87       	std	Z+8, r26	; 0x08
     ff6:	b1 87       	std	Z+9, r27	; 0x09
     ff8:	12 86       	std	Z+10, r1	; 0x0a
     ffa:	81 e8       	ldi	r24, 0x81	; 129
     ffc:	97 e0       	ldi	r25, 0x07	; 7
     ffe:	94 87       	std	Z+12, r25	; 0x0c
    1000:	83 87       	std	Z+11, r24	; 0x0b
    1002:	08 95       	ret

00001004 <nwkTxFrame>:
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	ec 01       	movw	r28, r24
    100a:	fc 01       	movw	r30, r24
    100c:	ea 57       	subi	r30, 0x7A	; 122
    100e:	ff 4f       	sbci	r31, 0xFF	; 255
    1010:	80 81       	ld	r24, Z
    1012:	81 ff       	sbrs	r24, 1
    1014:	03 c0       	rjmp	.+6      	; 0x101c <nwkTxFrame+0x18>
    1016:	92 e1       	ldi	r25, 0x12	; 18
    1018:	98 83       	st	Y, r25
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <nwkTxFrame+0x1c>
    101c:	92 e1       	ldi	r25, 0x12	; 18
    101e:	98 83       	st	Y, r25
    1020:	fe 01       	movw	r30, r28
    1022:	ed 57       	subi	r30, 0x7D	; 125
    1024:	ff 4f       	sbci	r31, 0xFF	; 255
    1026:	10 82       	st	Z, r1
    1028:	80 ff       	sbrs	r24, 0
    102a:	05 c0       	rjmp	.+10     	; 0x1036 <nwkTxFrame+0x32>
    102c:	2f ef       	ldi	r18, 0xFF	; 255
    102e:	3f ef       	ldi	r19, 0xFF	; 255
    1030:	3e 83       	std	Y+6, r19	; 0x06
    1032:	2d 83       	std	Y+5, r18	; 0x05
    1034:	06 c0       	rjmp	.+12     	; 0x1042 <nwkTxFrame+0x3e>
    1036:	20 91 dc 19 	lds	r18, 0x19DC	; 0x8019dc <nwkIb+0x2>
    103a:	30 91 dd 19 	lds	r19, 0x19DD	; 0x8019dd <nwkIb+0x3>
    103e:	3e 83       	std	Y+6, r19	; 0x06
    1040:	2d 83       	std	Y+5, r18	; 0x05
    1042:	85 70       	andi	r24, 0x05	; 5
    1044:	19 f4       	brne	.+6      	; 0x104c <nwkTxFrame+0x48>
    1046:	ce 01       	movw	r24, r28
    1048:	53 dd       	rcall	.-1370   	; 0xaf0 <nwkRoutePrepareTx>
    104a:	04 c0       	rjmp	.+8      	; 0x1054 <nwkTxFrame+0x50>
    104c:	8f 85       	ldd	r24, Y+15	; 0x0f
    104e:	98 89       	ldd	r25, Y+16	; 0x10
    1050:	98 87       	std	Y+8, r25	; 0x08
    1052:	8f 83       	std	Y+7, r24	; 0x07
    1054:	ea ed       	ldi	r30, 0xDA	; 218
    1056:	f9 e1       	ldi	r31, 0x19	; 25
    1058:	80 81       	ld	r24, Z
    105a:	91 81       	ldd	r25, Z+1	; 0x01
    105c:	9a 87       	std	Y+10, r25	; 0x0a
    105e:	89 87       	std	Y+9, r24	; 0x09
    1060:	85 81       	ldd	r24, Z+5	; 0x05
    1062:	8f 5f       	subi	r24, 0xFF	; 255
    1064:	85 83       	std	Z+5, r24	; 0x05
    1066:	8c 83       	std	Y+4, r24	; 0x04
    1068:	8f 81       	ldd	r24, Y+7	; 0x07
    106a:	98 85       	ldd	r25, Y+8	; 0x08
    106c:	01 96       	adiw	r24, 0x01	; 1
    106e:	69 f4       	brne	.+26     	; 0x108a <nwkTxFrame+0x86>
    1070:	81 e4       	ldi	r24, 0x41	; 65
    1072:	98 e8       	ldi	r25, 0x88	; 136
    1074:	9b 83       	std	Y+3, r25	; 0x03
    1076:	8a 83       	std	Y+2, r24	; 0x02
    1078:	c7 d3       	rcall	.+1934   	; 0x1808 <rand>
    107a:	cc 57       	subi	r28, 0x7C	; 124
    107c:	df 4f       	sbci	r29, 0xFF	; 255
    107e:	87 70       	andi	r24, 0x07	; 7
    1080:	99 27       	eor	r25, r25
    1082:	01 96       	adiw	r24, 0x01	; 1
    1084:	99 83       	std	Y+1, r25	; 0x01
    1086:	88 83       	st	Y, r24
    1088:	08 c0       	rjmp	.+16     	; 0x109a <nwkTxFrame+0x96>
    108a:	81 e6       	ldi	r24, 0x61	; 97
    108c:	98 e8       	ldi	r25, 0x88	; 136
    108e:	9b 83       	std	Y+3, r25	; 0x03
    1090:	8a 83       	std	Y+2, r24	; 0x02
    1092:	cc 57       	subi	r28, 0x7C	; 124
    1094:	df 4f       	sbci	r29, 0xFF	; 255
    1096:	19 82       	std	Y+1, r1	; 0x01
    1098:	18 82       	st	Y, r1
    109a:	df 91       	pop	r29
    109c:	cf 91       	pop	r28
    109e:	08 95       	ret

000010a0 <nwkTxAckReceived>:
    10a0:	cf 93       	push	r28
    10a2:	df 93       	push	r29
    10a4:	fc 01       	movw	r30, r24
    10a6:	21 85       	ldd	r18, Z+9	; 0x09
    10a8:	23 30       	cpi	r18, 0x03	; 3
    10aa:	d9 f4       	brne	.+54     	; 0x10e2 <nwkTxAckReceived+0x42>
    10ac:	10 c0       	rjmp	.+32     	; 0x10ce <nwkTxAckReceived+0x2e>
    10ae:	fc 01       	movw	r30, r24
    10b0:	20 81       	ld	r18, Z
    10b2:	26 31       	cpi	r18, 0x16	; 22
    10b4:	89 f4       	brne	.+34     	; 0x10d8 <nwkTxAckReceived+0x38>
    10b6:	34 85       	ldd	r19, Z+12	; 0x0c
    10b8:	29 81       	ldd	r18, Y+1	; 0x01
    10ba:	32 13       	cpse	r19, r18
    10bc:	0d c0       	rjmp	.+26     	; 0x10d8 <nwkTxAckReceived+0x38>
    10be:	27 e1       	ldi	r18, 0x17	; 23
    10c0:	20 83       	st	Z, r18
    10c2:	2a 81       	ldd	r18, Y+2	; 0x02
    10c4:	ea 57       	subi	r30, 0x7A	; 122
    10c6:	ff 4f       	sbci	r31, 0xFF	; 255
    10c8:	20 83       	st	Z, r18
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	0b c0       	rjmp	.+22     	; 0x10e4 <nwkTxAckReceived+0x44>
    10ce:	fc 01       	movw	r30, r24
    10d0:	c7 81       	ldd	r28, Z+7	; 0x07
    10d2:	d0 85       	ldd	r29, Z+8	; 0x08
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	20 dc       	rcall	.-1984   	; 0x91a <nwkFrameNext>
    10da:	00 97       	sbiw	r24, 0x00	; 0
    10dc:	41 f7       	brne	.-48     	; 0x10ae <nwkTxAckReceived+0xe>
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	01 c0       	rjmp	.+2      	; 0x10e4 <nwkTxAckReceived+0x44>
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	08 95       	ret

000010ea <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    10ea:	e0 91 51 19 	lds	r30, 0x1951	; 0x801951 <nwkTxPhyActiveFrame>
    10ee:	f0 91 52 19 	lds	r31, 0x1952	; 0x801952 <nwkTxPhyActiveFrame+0x1>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    10f2:	81 30       	cpi	r24, 0x01	; 1
    10f4:	21 f0       	breq	.+8      	; 0x10fe <PHY_DataConf+0x14>
    10f6:	48 f0       	brcs	.+18     	; 0x110a <PHY_DataConf+0x20>
    10f8:	82 30       	cpi	r24, 0x02	; 2
    10fa:	19 f0       	breq	.+6      	; 0x1102 <PHY_DataConf+0x18>
    10fc:	04 c0       	rjmp	.+8      	; 0x1106 <PHY_DataConf+0x1c>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    10fe:	80 e2       	ldi	r24, 0x20	; 32
    1100:	05 c0       	rjmp	.+10     	; 0x110c <PHY_DataConf+0x22>

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    1102:	81 e2       	ldi	r24, 0x21	; 33
    1104:	03 c0       	rjmp	.+6      	; 0x110c <PHY_DataConf+0x22>

    default:
      return NWK_ERROR_STATUS;
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	01 c0       	rjmp	.+2      	; 0x110c <PHY_DataConf+0x22>
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    110a:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    110c:	df 01       	movw	r26, r30
    110e:	ad 57       	subi	r26, 0x7D	; 125
    1110:	bf 4f       	sbci	r27, 0xFF	; 255
    1112:	8c 93       	st	X, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    1114:	85 e1       	ldi	r24, 0x15	; 21
    1116:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame = NULL;
    1118:	10 92 52 19 	sts	0x1952, r1	; 0x801952 <nwkTxPhyActiveFrame+0x1>
    111c:	10 92 51 19 	sts	0x1951, r1	; 0x801951 <nwkTxPhyActiveFrame>
  nwkIb.lock--;
    1120:	ea ed       	ldi	r30, 0xDA	; 218
    1122:	f9 e1       	ldi	r31, 0x19	; 25
    1124:	86 a1       	ldd	r24, Z+38	; 0x26
    1126:	97 a1       	ldd	r25, Z+39	; 0x27
    1128:	01 97       	sbiw	r24, 0x01	; 1
    112a:	97 a3       	std	Z+39, r25	; 0x27
    112c:	86 a3       	std	Z+38, r24	; 0x26
    112e:	08 95       	ret

00001130 <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    1130:	9f 92       	push	r9
    1132:	af 92       	push	r10
    1134:	bf 92       	push	r11
    1136:	cf 92       	push	r12
    1138:	df 92       	push	r13
    113a:	ef 92       	push	r14
    113c:	ff 92       	push	r15
    113e:	0f 93       	push	r16
    1140:	1f 93       	push	r17
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    1146:	c0 e0       	ldi	r28, 0x00	; 0
    1148:	d0 e0       	ldi	r29, 0x00	; 0
      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
    114a:	0f 2e       	mov	r0, r31
    114c:	f4 e1       	ldi	r31, 0x14	; 20
    114e:	af 2e       	mov	r10, r31
    1150:	f0 2d       	mov	r31, r0
          PHY_DataReq(frame->data, frame->size);
          nwkIb.lock++;
    1152:	0a ed       	ldi	r16, 0xDA	; 218
    1154:	19 e1       	ldi	r17, 0x19	; 25
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    1156:	0f 2e       	mov	r0, r31
    1158:	f7 e1       	ldi	r31, 0x17	; 23
    115a:	df 2e       	mov	r13, r31
    115c:	f0 2d       	mov	r31, r0
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    115e:	0f 2e       	mov	r0, r31
    1160:	f6 e1       	ldi	r31, 0x16	; 22
    1162:	9f 2e       	mov	r9, r31
    1164:	f0 2d       	mov	r31, r0
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    1166:	0f 2e       	mov	r0, r31
    1168:	f9 e2       	ldi	r31, 0x29	; 41
    116a:	ef 2e       	mov	r14, r31
    116c:	f1 2c       	mov	r15, r1
    116e:	f0 2d       	mov	r31, r0
          frame->state = NWK_TX_STATE_WAIT_DELAY;
          SYS_TimerStart(&nwkTxDelayTimer);
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    1170:	0f 2e       	mov	r0, r31
    1172:	f3 e1       	ldi	r31, 0x13	; 19
    1174:	cf 2e       	mov	r12, r31
    1176:	f0 2d       	mov	r31, r0

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    1178:	0f 2e       	mov	r0, r31
    117a:	f1 e1       	ldi	r31, 0x11	; 17
    117c:	bf 2e       	mov	r11, r31
    117e:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    1180:	60 c0       	rjmp	.+192    	; 0x1242 <nwkTxTaskHandler+0x112>
  {
    switch (frame->state)
    1182:	88 81       	ld	r24, Y
    1184:	83 31       	cpi	r24, 0x13	; 19
    1186:	c1 f0       	breq	.+48     	; 0x11b8 <nwkTxTaskHandler+0x88>
    1188:	18 f4       	brcc	.+6      	; 0x1190 <nwkTxTaskHandler+0x60>
    118a:	82 31       	cpi	r24, 0x12	; 18
    118c:	39 f0       	breq	.+14     	; 0x119c <nwkTxTaskHandler+0x6c>
    118e:	59 c0       	rjmp	.+178    	; 0x1242 <nwkTxTaskHandler+0x112>
    1190:	85 31       	cpi	r24, 0x15	; 21
    1192:	49 f1       	breq	.+82     	; 0x11e6 <nwkTxTaskHandler+0xb6>
    1194:	87 31       	cpi	r24, 0x17	; 23
    1196:	09 f4       	brne	.+2      	; 0x119a <nwkTxTaskHandler+0x6a>
    1198:	45 c0       	rjmp	.+138    	; 0x1224 <nwkTxTaskHandler+0xf4>
    119a:	53 c0       	rjmp	.+166    	; 0x1242 <nwkTxTaskHandler+0x112>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    119c:	fe 01       	movw	r30, r28
    119e:	ec 57       	subi	r30, 0x7C	; 124
    11a0:	ff 4f       	sbci	r31, 0xFF	; 255
    11a2:	80 81       	ld	r24, Z
    11a4:	91 81       	ldd	r25, Z+1	; 0x01
    11a6:	89 2b       	or	r24, r25
    11a8:	29 f0       	breq	.+10     	; 0x11b4 <nwkTxTaskHandler+0x84>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    11aa:	b8 82       	st	Y, r11
          SYS_TimerStart(&nwkTxDelayTimer);
    11ac:	87 e3       	ldi	r24, 0x37	; 55
    11ae:	99 e1       	ldi	r25, 0x19	; 25
    11b0:	4c d2       	rcall	.+1176   	; 0x164a <SYS_TimerStart>
    11b2:	47 c0       	rjmp	.+142    	; 0x1242 <nwkTxTaskHandler+0x112>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    11b4:	c8 82       	st	Y, r12
    11b6:	45 c0       	rjmp	.+138    	; 0x1242 <nwkTxTaskHandler+0x112>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    11b8:	80 91 51 19 	lds	r24, 0x1951	; 0x801951 <nwkTxPhyActiveFrame>
    11bc:	90 91 52 19 	lds	r25, 0x1952	; 0x801952 <nwkTxPhyActiveFrame+0x1>
    11c0:	89 2b       	or	r24, r25
    11c2:	09 f0       	breq	.+2      	; 0x11c6 <nwkTxTaskHandler+0x96>
    11c4:	3e c0       	rjmp	.+124    	; 0x1242 <nwkTxTaskHandler+0x112>
        {
          nwkTxPhyActiveFrame = frame;
    11c6:	d0 93 52 19 	sts	0x1952, r29	; 0x801952 <nwkTxPhyActiveFrame+0x1>
    11ca:	c0 93 51 19 	sts	0x1951, r28	; 0x801951 <nwkTxPhyActiveFrame>
          frame->state = NWK_TX_STATE_WAIT_CONF;
    11ce:	a8 82       	st	Y, r10
          PHY_DataReq(frame->data, frame->size);
    11d0:	69 81       	ldd	r22, Y+1	; 0x01
    11d2:	ce 01       	movw	r24, r28
    11d4:	02 96       	adiw	r24, 0x02	; 2
    11d6:	cb d0       	rcall	.+406    	; 0x136e <PHY_DataReq>
          nwkIb.lock++;
    11d8:	f8 01       	movw	r30, r16
    11da:	86 a1       	ldd	r24, Z+38	; 0x26
    11dc:	97 a1       	ldd	r25, Z+39	; 0x27
    11de:	01 96       	adiw	r24, 0x01	; 1
    11e0:	97 a3       	std	Z+39, r25	; 0x27
    11e2:	86 a3       	std	Z+38, r24	; 0x26
    11e4:	2e c0       	rjmp	.+92     	; 0x1242 <nwkTxTaskHandler+0x112>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    11e6:	fe 01       	movw	r30, r28
    11e8:	ed 57       	subi	r30, 0x7D	; 125
    11ea:	ff 4f       	sbci	r31, 0xFF	; 255
    11ec:	80 81       	ld	r24, Z
    11ee:	81 11       	cpse	r24, r1
    11f0:	17 c0       	rjmp	.+46     	; 0x1220 <nwkTxTaskHandler+0xf0>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    11f2:	2d 85       	ldd	r18, Y+13	; 0x0d
    11f4:	3e 85       	ldd	r19, Y+14	; 0x0e
    11f6:	f8 01       	movw	r30, r16
    11f8:	80 81       	ld	r24, Z
    11fa:	91 81       	ldd	r25, Z+1	; 0x01
    11fc:	28 17       	cp	r18, r24
    11fe:	39 07       	cpc	r19, r25
    1200:	69 f4       	brne	.+26     	; 0x121c <nwkTxTaskHandler+0xec>
    1202:	8b 85       	ldd	r24, Y+11	; 0x0b
    1204:	80 ff       	sbrs	r24, 0
    1206:	0a c0       	rjmp	.+20     	; 0x121c <nwkTxTaskHandler+0xec>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    1208:	98 82       	st	Y, r9
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    120a:	fe 01       	movw	r30, r28
    120c:	ec 57       	subi	r30, 0x7C	; 124
    120e:	ff 4f       	sbci	r31, 0xFF	; 255
    1210:	f1 82       	std	Z+1, r15	; 0x01
    1212:	e0 82       	st	Z, r14
            SYS_TimerStart(&nwkTxAckWaitTimer);
    1214:	84 e4       	ldi	r24, 0x44	; 68
    1216:	99 e1       	ldi	r25, 0x19	; 25
    1218:	18 d2       	rcall	.+1072   	; 0x164a <SYS_TimerStart>
    121a:	13 c0       	rjmp	.+38     	; 0x1242 <nwkTxTaskHandler+0x112>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    121c:	d8 82       	st	Y, r13
    121e:	11 c0       	rjmp	.+34     	; 0x1242 <nwkTxTaskHandler+0x112>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    1220:	d8 82       	st	Y, r13
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    1222:	0f c0       	rjmp	.+30     	; 0x1242 <nwkTxTaskHandler+0x112>
    1224:	ce 01       	movw	r24, r28
    1226:	1d dc       	rcall	.-1990   	; 0xa62 <nwkRouteFrameSent>
#endif
        if (NULL == frame->tx.confirm)
    1228:	fe 01       	movw	r30, r28
    122a:	e9 57       	subi	r30, 0x79	; 121
    122c:	ff 4f       	sbci	r31, 0xFF	; 255
    122e:	01 90       	ld	r0, Z+
    1230:	f0 81       	ld	r31, Z
    1232:	e0 2d       	mov	r30, r0
    1234:	30 97       	sbiw	r30, 0x00	; 0
          nwkFrameFree(frame);
    1236:	19 f4       	brne	.+6      	; 0x123e <nwkTxTaskHandler+0x10e>
    1238:	ce 01       	movw	r24, r28
    123a:	65 db       	rcall	.-2358   	; 0x906 <nwkFrameFree>
        else
          frame->tx.confirm(frame);
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <nwkTxTaskHandler+0x112>
    123e:	ce 01       	movw	r24, r28
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    1240:	19 95       	eicall
    1242:	ce 01       	movw	r24, r28
    1244:	6a db       	rcall	.-2348   	; 0x91a <nwkFrameNext>
    1246:	ec 01       	movw	r28, r24
    1248:	89 2b       	or	r24, r25
    124a:	09 f0       	breq	.+2      	; 0x124e <nwkTxTaskHandler+0x11e>
    124c:	9a cf       	rjmp	.-204    	; 0x1182 <nwkTxTaskHandler+0x52>

      default:
        break;
    };
  }
}
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	1f 91       	pop	r17
    1254:	0f 91       	pop	r16
    1256:	ff 90       	pop	r15
    1258:	ef 90       	pop	r14
    125a:	df 90       	pop	r13
    125c:	cf 90       	pop	r12
    125e:	bf 90       	pop	r11
    1260:	af 90       	pop	r10
    1262:	9f 90       	pop	r9
    1264:	08 95       	ret

00001266 <phySetChannel>:
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
  phySetRxState();
  phyState = PHY_STATE_IDLE;
    1266:	80 91 53 19 	lds	r24, 0x1953	; 0x801953 <phyBand>
    126a:	98 2f       	mov	r25, r24
    126c:	9f 70       	andi	r25, 0x0F	; 15
    126e:	e4 e5       	ldi	r30, 0x54	; 84
    1270:	f1 e0       	ldi	r31, 0x01	; 1
    1272:	80 81       	ld	r24, Z
    1274:	80 7f       	andi	r24, 0xF0	; 240
    1276:	89 2b       	or	r24, r25
    1278:	80 83       	st	Z, r24
    127a:	80 91 53 19 	lds	r24, 0x1953	; 0x801953 <phyBand>
    127e:	88 23       	and	r24, r24
    1280:	29 f0       	breq	.+10     	; 0x128c <phySetChannel+0x26>
    1282:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <phyChannel>
    1286:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7c0153>
    128a:	08 95       	ret
    128c:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <phyChannel>
    1290:	98 2f       	mov	r25, r24
    1292:	9f 71       	andi	r25, 0x1F	; 31
    1294:	e8 e4       	ldi	r30, 0x48	; 72
    1296:	f1 e0       	ldi	r31, 0x01	; 1
    1298:	80 81       	ld	r24, Z
    129a:	80 7e       	andi	r24, 0xE0	; 224
    129c:	89 2b       	or	r24, r25
    129e:	80 83       	st	Z, r24
    12a0:	08 95       	ret

000012a2 <phyTrxSetState>:
    12a2:	93 e0       	ldi	r25, 0x03	; 3
    12a4:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    12a8:	e1 e4       	ldi	r30, 0x41	; 65
    12aa:	f1 e0       	ldi	r31, 0x01	; 1
    12ac:	90 81       	ld	r25, Z
    12ae:	9f 71       	andi	r25, 0x1F	; 31
    12b0:	98 30       	cpi	r25, 0x08	; 8
    12b2:	e1 f7       	brne	.-8      	; 0x12ac <phyTrxSetState+0xa>
    12b4:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    12b8:	e1 e4       	ldi	r30, 0x41	; 65
    12ba:	f1 e0       	ldi	r31, 0x01	; 1
    12bc:	90 81       	ld	r25, Z
    12be:	9f 71       	andi	r25, 0x1F	; 31
    12c0:	89 13       	cpse	r24, r25
    12c2:	fc cf       	rjmp	.-8      	; 0x12bc <phyTrxSetState+0x1a>
    12c4:	08 95       	ret

000012c6 <phySetRxState>:
    12c6:	88 e0       	ldi	r24, 0x08	; 8
    12c8:	ec df       	rcall	.-40     	; 0x12a2 <phyTrxSetState>
    12ca:	8f ef       	ldi	r24, 0xFF	; 255
    12cc:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    12d0:	80 91 55 19 	lds	r24, 0x1955	; 0x801955 <phyRxState>
    12d4:	88 23       	and	r24, r24
    12d6:	11 f0       	breq	.+4      	; 0x12dc <phySetRxState+0x16>
    12d8:	86 e1       	ldi	r24, 0x16	; 22
    12da:	e3 cf       	rjmp	.-58     	; 0x12a2 <phyTrxSetState>
    12dc:	08 95       	ret

000012de <PHY_Init>:
    12de:	e9 e3       	ldi	r30, 0x39	; 57
    12e0:	f1 e0       	ldi	r31, 0x01	; 1
    12e2:	80 81       	ld	r24, Z
    12e4:	81 60       	ori	r24, 0x01	; 1
    12e6:	80 83       	st	Z, r24
    12e8:	10 92 55 19 	sts	0x1955, r1	; 0x801955 <phyRxState>
    12ec:	10 92 53 19 	sts	0x1953, r1	; 0x801953 <phyBand>
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	80 93 d6 19 	sts	0x19D6, r24	; 0x8019d6 <phyState>
    12f6:	88 e0       	ldi	r24, 0x08	; 8
    12f8:	d4 df       	rcall	.-88     	; 0x12a2 <phyTrxSetState>
    12fa:	8b ee       	ldi	r24, 0xEB	; 235
    12fc:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x7c0156>
    1300:	ec e4       	ldi	r30, 0x4C	; 76
    1302:	f1 e0       	ldi	r31, 0x01	; 1
    1304:	80 81       	ld	r24, Z
    1306:	80 68       	ori	r24, 0x80	; 128
    1308:	80 83       	st	Z, r24
    130a:	08 95       	ret

0000130c <PHY_SetRxState>:
    130c:	80 93 55 19 	sts	0x1955, r24	; 0x801955 <phyRxState>
    1310:	da cf       	rjmp	.-76     	; 0x12c6 <phySetRxState>
    1312:	08 95       	ret

00001314 <PHY_SetChannel>:
    1314:	80 93 54 19 	sts	0x1954, r24	; 0x801954 <phyChannel>
    1318:	a6 cf       	rjmp	.-180    	; 0x1266 <phySetChannel>
    131a:	08 95       	ret

0000131c <PHY_SetPanId>:
    131c:	cf 93       	push	r28
    131e:	df 93       	push	r29
    1320:	1f 92       	push	r1
    1322:	1f 92       	push	r1
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
    1328:	9a 83       	std	Y+2, r25	; 0x02
    132a:	89 83       	std	Y+1, r24	; 0x01
    132c:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7c0162>
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7c0163>
    1336:	0f 90       	pop	r0
    1338:	0f 90       	pop	r0
    133a:	df 91       	pop	r29
    133c:	cf 91       	pop	r28
    133e:	08 95       	ret

00001340 <PHY_SetShortAddr>:
    1340:	cf 93       	push	r28
    1342:	df 93       	push	r29
    1344:	1f 92       	push	r1
    1346:	1f 92       	push	r1
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
    134c:	9a 83       	std	Y+2, r25	; 0x02
    134e:	89 83       	std	Y+1, r24	; 0x01
    1350:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7c0160>
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7c0161>
    135a:	99 81       	ldd	r25, Y+1	; 0x01
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	89 0f       	add	r24, r25
    1360:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7c016d>
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	df 91       	pop	r29
    136a:	cf 91       	pop	r28
    136c:	08 95       	ret

0000136e <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    136e:	1f 93       	push	r17
    1370:	cf 93       	push	r28
    1372:	df 93       	push	r29
    1374:	18 2f       	mov	r17, r24
    1376:	d9 2f       	mov	r29, r25
    1378:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    137a:	89 e1       	ldi	r24, 0x19	; 25
    137c:	92 df       	rcall	.-220    	; 0x12a2 <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    137e:	8f ef       	ldi	r24, 0xFF	; 255
    1380:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    1384:	82 e0       	ldi	r24, 0x02	; 2
    1386:	8c 0f       	add	r24, r28
    1388:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x7c0180>
  for (uint8_t i = 0; i < size; i++)
    138c:	cc 23       	and	r28, r28
    138e:	71 f0       	breq	.+28     	; 0x13ac <PHY_DataReq+0x3e>
    1390:	a1 2f       	mov	r26, r17
    1392:	bd 2f       	mov	r27, r29
    1394:	c1 50       	subi	r28, 0x01	; 1
    1396:	6c 2f       	mov	r22, r28
    1398:	70 e0       	ldi	r23, 0x00	; 0
    139a:	6e 57       	subi	r22, 0x7E	; 126
    139c:	7e 4f       	sbci	r23, 0xFE	; 254
    139e:	e1 e8       	ldi	r30, 0x81	; 129
    13a0:	f1 e0       	ldi	r31, 0x01	; 1
    TRX_FRAME_BUFFER(i+1) = data[i];
    13a2:	8d 91       	ld	r24, X+
    13a4:	81 93       	st	Z+, r24
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    13a6:	e6 17       	cp	r30, r22
    13a8:	f7 07       	cpc	r31, r23
    13aa:	d9 f7       	brne	.-10     	; 0x13a2 <PHY_DataReq+0x34>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    13ac:	83 e0       	ldi	r24, 0x03	; 3
    13ae:	80 93 d6 19 	sts	0x19D6, r24	; 0x8019d6 <phyState>
  TRX_STATE_REG = TRX_CMD_TX_START;
    13b2:	82 e0       	ldi	r24, 0x02	; 2
    13b4:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
}
    13b8:	df 91       	pop	r29
    13ba:	cf 91       	pop	r28
    13bc:	1f 91       	pop	r17
    13be:	08 95       	ret

000013c0 <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    13c0:	1f 93       	push	r17
    13c2:	cf 93       	push	r28
    13c4:	df 93       	push	r29
    13c6:	00 d0       	rcall	.+0      	; 0x13c8 <PHY_TaskHandler+0x8>
    13c8:	1f 92       	push	r1
    13ca:	1f 92       	push	r1
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    13d0:	80 91 d6 19 	lds	r24, 0x19D6	; 0x8019d6 <phyState>
    13d4:	82 30       	cpi	r24, 0x02	; 2
    13d6:	09 f4       	brne	.+2      	; 0x13da <PHY_TaskHandler+0x1a>
    13d8:	65 c0       	rjmp	.+202    	; 0x14a4 <PHY_TaskHandler+0xe4>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    13da:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    13de:	83 ff       	sbrs	r24, 3
    13e0:	3e c0       	rjmp	.+124    	; 0x145e <PHY_TaskHandler+0x9e>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    13e2:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7c017b>

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    13e6:	6a 2f       	mov	r22, r26
    13e8:	70 e0       	ldi	r23, 0x00	; 0
    13ea:	ab 01       	movw	r20, r22
    13ec:	4f 5f       	subi	r20, 0xFF	; 255
    13ee:	5f 4f       	sbci	r21, 0xFF	; 255
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	20 e0       	ldi	r18, 0x00	; 0
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    13f6:	fc 01       	movw	r30, r24
    13f8:	e0 58       	subi	r30, 0x80	; 128
    13fa:	fe 4f       	sbci	r31, 0xFE	; 254
    13fc:	30 81       	ld	r19, Z
    13fe:	fc 01       	movw	r30, r24
    1400:	ea 5a       	subi	r30, 0xAA	; 170
    1402:	f6 4e       	sbci	r31, 0xE6	; 230
    1404:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    1406:	2f 5f       	subi	r18, 0xFF	; 255
    1408:	82 2f       	mov	r24, r18
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	84 17       	cp	r24, r20
    140e:	95 07       	cpc	r25, r21
    1410:	94 f3       	brlt	.-28     	; 0x13f6 <PHY_TaskHandler+0x36>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    1412:	86 e5       	ldi	r24, 0x56	; 86
    1414:	99 e1       	ldi	r25, 0x19	; 25
    1416:	9a 83       	std	Y+2, r25	; 0x02
    1418:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    141a:	a2 50       	subi	r26, 0x02	; 2
    141c:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    141e:	fb 01       	movw	r30, r22
    1420:	ea 5a       	subi	r30, 0xAA	; 170
    1422:	f6 4e       	sbci	r31, 0xE6	; 230
    1424:	80 81       	ld	r24, Z
    1426:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    1428:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x7c0147>
    142c:	8a 55       	subi	r24, 0x5A	; 90
    142e:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    1430:	ce 01       	movw	r24, r28
    1432:	01 96       	adiw	r24, 0x01	; 1
    1434:	fd db       	rcall	.-2054   	; 0xc30 <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    1436:	e1 e4       	ldi	r30, 0x41	; 65
    1438:	f1 e0       	ldi	r31, 0x01	; 1
    143a:	80 81       	ld	r24, Z
    143c:	8f 71       	andi	r24, 0x1F	; 31
    143e:	86 31       	cpi	r24, 0x16	; 22
    1440:	e1 f7       	brne	.-8      	; 0x143a <PHY_TaskHandler+0x7a>

    IRQ_STATUS_REG_s.rxEnd = 1;
    1442:	ef e4       	ldi	r30, 0x4F	; 79
    1444:	f1 e0       	ldi	r31, 0x01	; 1
    1446:	80 81       	ld	r24, Z
    1448:	88 60       	ori	r24, 0x08	; 8
    144a:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    144c:	ec e4       	ldi	r30, 0x4C	; 76
    144e:	f1 e0       	ldi	r31, 0x01	; 1
    1450:	80 81       	ld	r24, Z
    1452:	8f 77       	andi	r24, 0x7F	; 127
    1454:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    1456:	80 81       	ld	r24, Z
    1458:	80 68       	ori	r24, 0x80	; 128
    145a:	80 83       	st	Z, r24
    145c:	23 c0       	rjmp	.+70     	; 0x14a4 <PHY_TaskHandler+0xe4>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    145e:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    1462:	86 ff       	sbrs	r24, 6
    1464:	1f c0       	rjmp	.+62     	; 0x14a4 <PHY_TaskHandler+0xe4>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    1466:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    146a:	8f 71       	andi	r24, 0x1F	; 31
    146c:	89 31       	cpi	r24, 0x19	; 25
    146e:	a9 f4       	brne	.+42     	; 0x149a <PHY_TaskHandler+0xda>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    1470:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    1474:	12 95       	swap	r17
    1476:	16 95       	lsr	r17
    1478:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    147a:	49 f0       	breq	.+18     	; 0x148e <PHY_TaskHandler+0xce>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    147c:	13 30       	cpi	r17, 0x03	; 3
    147e:	21 f0       	breq	.+8      	; 0x1488 <PHY_TaskHandler+0xc8>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    1480:	15 30       	cpi	r17, 0x05	; 5
    1482:	21 f0       	breq	.+8      	; 0x148c <PHY_TaskHandler+0xcc>
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;
    1484:	13 e0       	ldi	r17, 0x03	; 3
    1486:	03 c0       	rjmp	.+6      	; 0x148e <PHY_TaskHandler+0xce>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    1488:	11 e0       	ldi	r17, 0x01	; 1
    148a:	01 c0       	rjmp	.+2      	; 0x148e <PHY_TaskHandler+0xce>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    148c:	12 e0       	ldi	r17, 0x02	; 2
    148e:	1b df       	rcall	.-458    	; 0x12c6 <phySetRxState>
      phyState = PHY_STATE_IDLE;
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	80 93 d6 19 	sts	0x19D6, r24	; 0x8019d6 <phyState>

      PHY_DataConf(status);
    1496:	81 2f       	mov	r24, r17
    1498:	28 de       	rcall	.-944    	; 0x10ea <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    149a:	ef e4       	ldi	r30, 0x4F	; 79
    149c:	f1 e0       	ldi	r31, 0x01	; 1
    149e:	80 81       	ld	r24, Z
    14a0:	80 64       	ori	r24, 0x40	; 64
    14a2:	80 83       	st	Z, r24
  }
}
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	df 91       	pop	r29
    14b0:	cf 91       	pop	r28
    14b2:	1f 91       	pop	r17
    14b4:	08 95       	ret

000014b6 <SYS_Init>:
/*************************************************************************//**
*****************************************************************************/

void SYS_Init(void)
{
  HAL_Init();
    14b6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <HAL_Init>
  SYS_TimerInit();
    14ba:	6b d0       	rcall	.+214    	; 0x1592 <SYS_TimerInit>
  PHY_Init();
    14bc:	10 df       	rcall	.-480    	; 0x12de <PHY_Init>
  NWK_Init();
    14be:	c0 c8       	rjmp	.-3712   	; 0x640 <NWK_Init>
    14c0:	08 95       	ret

000014c2 <SYS_TaskHandler>:
    14c2:	7e df       	rcall	.-260    	; 0x13c0 <PHY_TaskHandler>
/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
  NWK_TaskHandler();
    14c4:	e9 d8       	rcall	.-3630   	; 0x698 <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    14c6:	cc c0       	rjmp	.+408    	; 0x1660 <SYS_TimerTaskHandler>
    14c8:	08 95       	ret

000014ca <placeTimer>:
    14ca:	0f 93       	push	r16
    14cc:	1f 93       	push	r17
    14ce:	cf 93       	push	r28
    14d0:	df 93       	push	r29
    14d2:	ec 01       	movw	r28, r24
    14d4:	80 91 d7 19 	lds	r24, 0x19D7	; 0x8019d7 <timers>
    14d8:	90 91 d8 19 	lds	r25, 0x19D8	; 0x8019d8 <timers+0x1>
    14dc:	00 97       	sbiw	r24, 0x00	; 0
    14de:	09 f4       	brne	.+2      	; 0x14e2 <placeTimer+0x18>
    14e0:	45 c0       	rjmp	.+138    	; 0x156c <placeTimer+0xa2>
    14e2:	4e 81       	ldd	r20, Y+6	; 0x06
    14e4:	5f 81       	ldd	r21, Y+7	; 0x07
    14e6:	68 85       	ldd	r22, Y+8	; 0x08
    14e8:	79 85       	ldd	r23, Y+9	; 0x09
    14ea:	fc 01       	movw	r30, r24
    14ec:	02 81       	ldd	r16, Z+2	; 0x02
    14ee:	13 81       	ldd	r17, Z+3	; 0x03
    14f0:	24 81       	ldd	r18, Z+4	; 0x04
    14f2:	35 81       	ldd	r19, Z+5	; 0x05
    14f4:	40 17       	cp	r20, r16
    14f6:	51 07       	cpc	r21, r17
    14f8:	62 07       	cpc	r22, r18
    14fa:	73 07       	cpc	r23, r19
    14fc:	60 f0       	brcs	.+24     	; 0x1516 <placeTimer+0x4c>
    14fe:	dc 01       	movw	r26, r24
    1500:	17 c0       	rjmp	.+46     	; 0x1530 <placeTimer+0x66>
    1502:	02 81       	ldd	r16, Z+2	; 0x02
    1504:	13 81       	ldd	r17, Z+3	; 0x03
    1506:	24 81       	ldd	r18, Z+4	; 0x04
    1508:	35 81       	ldd	r19, Z+5	; 0x05
    150a:	40 17       	cp	r20, r16
    150c:	51 07       	cpc	r21, r17
    150e:	62 07       	cpc	r22, r18
    1510:	73 07       	cpc	r23, r19
    1512:	68 f4       	brcc	.+26     	; 0x152e <placeTimer+0x64>
    1514:	03 c0       	rjmp	.+6      	; 0x151c <placeTimer+0x52>
    1516:	fc 01       	movw	r30, r24
    1518:	a0 e0       	ldi	r26, 0x00	; 0
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	04 1b       	sub	r16, r20
    151e:	15 0b       	sbc	r17, r21
    1520:	26 0b       	sbc	r18, r22
    1522:	37 0b       	sbc	r19, r23
    1524:	02 83       	std	Z+2, r16	; 0x02
    1526:	13 83       	std	Z+3, r17	; 0x03
    1528:	24 83       	std	Z+4, r18	; 0x04
    152a:	35 83       	std	Z+5, r19	; 0x05
    152c:	0a c0       	rjmp	.+20     	; 0x1542 <placeTimer+0x78>
    152e:	df 01       	movw	r26, r30
    1530:	40 1b       	sub	r20, r16
    1532:	51 0b       	sbc	r21, r17
    1534:	62 0b       	sbc	r22, r18
    1536:	73 0b       	sbc	r23, r19
    1538:	ed 91       	ld	r30, X+
    153a:	fc 91       	ld	r31, X
    153c:	11 97       	sbiw	r26, 0x01	; 1
    153e:	30 97       	sbiw	r30, 0x00	; 0
    1540:	01 f7       	brne	.-64     	; 0x1502 <placeTimer+0x38>
    1542:	4a 83       	std	Y+2, r20	; 0x02
    1544:	5b 83       	std	Y+3, r21	; 0x03
    1546:	6c 83       	std	Y+4, r22	; 0x04
    1548:	7d 83       	std	Y+5, r23	; 0x05
    154a:	10 97       	sbiw	r26, 0x00	; 0
    154c:	41 f0       	breq	.+16     	; 0x155e <placeTimer+0x94>
    154e:	8d 91       	ld	r24, X+
    1550:	9c 91       	ld	r25, X
    1552:	11 97       	sbiw	r26, 0x01	; 1
    1554:	99 83       	std	Y+1, r25	; 0x01
    1556:	88 83       	st	Y, r24
    1558:	cd 93       	st	X+, r28
    155a:	dc 93       	st	X, r29
    155c:	15 c0       	rjmp	.+42     	; 0x1588 <placeTimer+0xbe>
    155e:	99 83       	std	Y+1, r25	; 0x01
    1560:	88 83       	st	Y, r24
    1562:	d0 93 d8 19 	sts	0x19D8, r29	; 0x8019d8 <timers+0x1>
    1566:	c0 93 d7 19 	sts	0x19D7, r28	; 0x8019d7 <timers>
    156a:	0e c0       	rjmp	.+28     	; 0x1588 <placeTimer+0xbe>
    156c:	19 82       	std	Y+1, r1	; 0x01
    156e:	18 82       	st	Y, r1
    1570:	8e 81       	ldd	r24, Y+6	; 0x06
    1572:	9f 81       	ldd	r25, Y+7	; 0x07
    1574:	a8 85       	ldd	r26, Y+8	; 0x08
    1576:	b9 85       	ldd	r27, Y+9	; 0x09
    1578:	8a 83       	std	Y+2, r24	; 0x02
    157a:	9b 83       	std	Y+3, r25	; 0x03
    157c:	ac 83       	std	Y+4, r26	; 0x04
    157e:	bd 83       	std	Y+5, r27	; 0x05
    1580:	d0 93 d8 19 	sts	0x19D8, r29	; 0x8019d8 <timers+0x1>
    1584:	c0 93 d7 19 	sts	0x19D7, r28	; 0x8019d7 <timers>
    1588:	df 91       	pop	r29
    158a:	cf 91       	pop	r28
    158c:	1f 91       	pop	r17
    158e:	0f 91       	pop	r16
    1590:	08 95       	ret

00001592 <SYS_TimerInit>:
    1592:	10 92 d8 19 	sts	0x19D8, r1	; 0x8019d8 <timers+0x1>
    1596:	10 92 d7 19 	sts	0x19D7, r1	; 0x8019d7 <timers>
    159a:	08 95       	ret

0000159c <SYS_TimerStop>:
    159c:	cf 93       	push	r28
    159e:	df 93       	push	r29
    15a0:	a0 91 d7 19 	lds	r26, 0x19D7	; 0x8019d7 <timers>
    15a4:	b0 91 d8 19 	lds	r27, 0x19D8	; 0x8019d8 <timers+0x1>
    15a8:	10 97       	sbiw	r26, 0x00	; 0
    15aa:	91 f1       	breq	.+100    	; 0x1610 <SYS_TimerStop+0x74>
    15ac:	a8 17       	cp	r26, r24
    15ae:	b9 07       	cpc	r27, r25
    15b0:	51 f5       	brne	.+84     	; 0x1606 <SYS_TimerStop+0x6a>
    15b2:	0a c0       	rjmp	.+20     	; 0x15c8 <SYS_TimerStop+0x2c>
    15b4:	8e 17       	cp	r24, r30
    15b6:	9f 07       	cpc	r25, r31
    15b8:	29 f5       	brne	.+74     	; 0x1604 <SYS_TimerStop+0x68>
    15ba:	10 97       	sbiw	r26, 0x00	; 0
    15bc:	31 f0       	breq	.+12     	; 0x15ca <SYS_TimerStop+0x2e>
    15be:	20 81       	ld	r18, Z
    15c0:	31 81       	ldd	r19, Z+1	; 0x01
    15c2:	2d 93       	st	X+, r18
    15c4:	3c 93       	st	X, r19
    15c6:	07 c0       	rjmp	.+14     	; 0x15d6 <SYS_TimerStop+0x3a>
    15c8:	fc 01       	movw	r30, r24
    15ca:	20 81       	ld	r18, Z
    15cc:	31 81       	ldd	r19, Z+1	; 0x01
    15ce:	30 93 d8 19 	sts	0x19D8, r19	; 0x8019d8 <timers+0x1>
    15d2:	20 93 d7 19 	sts	0x19D7, r18	; 0x8019d7 <timers>
    15d6:	01 90       	ld	r0, Z+
    15d8:	f0 81       	ld	r31, Z
    15da:	e0 2d       	mov	r30, r0
    15dc:	30 97       	sbiw	r30, 0x00	; 0
    15de:	c1 f0       	breq	.+48     	; 0x1610 <SYS_TimerStop+0x74>
    15e0:	42 81       	ldd	r20, Z+2	; 0x02
    15e2:	53 81       	ldd	r21, Z+3	; 0x03
    15e4:	64 81       	ldd	r22, Z+4	; 0x04
    15e6:	75 81       	ldd	r23, Z+5	; 0x05
    15e8:	ec 01       	movw	r28, r24
    15ea:	8a 81       	ldd	r24, Y+2	; 0x02
    15ec:	9b 81       	ldd	r25, Y+3	; 0x03
    15ee:	ac 81       	ldd	r26, Y+4	; 0x04
    15f0:	bd 81       	ldd	r27, Y+5	; 0x05
    15f2:	84 0f       	add	r24, r20
    15f4:	95 1f       	adc	r25, r21
    15f6:	a6 1f       	adc	r26, r22
    15f8:	b7 1f       	adc	r27, r23
    15fa:	82 83       	std	Z+2, r24	; 0x02
    15fc:	93 83       	std	Z+3, r25	; 0x03
    15fe:	a4 83       	std	Z+4, r26	; 0x04
    1600:	b5 83       	std	Z+5, r27	; 0x05
    1602:	06 c0       	rjmp	.+12     	; 0x1610 <SYS_TimerStop+0x74>
    1604:	df 01       	movw	r26, r30
    1606:	ed 91       	ld	r30, X+
    1608:	fc 91       	ld	r31, X
    160a:	11 97       	sbiw	r26, 0x01	; 1
    160c:	30 97       	sbiw	r30, 0x00	; 0
    160e:	91 f6       	brne	.-92     	; 0x15b4 <SYS_TimerStop+0x18>
    1610:	df 91       	pop	r29
    1612:	cf 91       	pop	r28
    1614:	08 95       	ret

00001616 <SYS_TimerStarted>:
    1616:	e0 91 d7 19 	lds	r30, 0x19D7	; 0x8019d7 <timers>
    161a:	f0 91 d8 19 	lds	r31, 0x19D8	; 0x8019d8 <timers+0x1>
    161e:	30 97       	sbiw	r30, 0x00	; 0
    1620:	71 f0       	breq	.+28     	; 0x163e <SYS_TimerStarted+0x28>
    1622:	e8 17       	cp	r30, r24
    1624:	f9 07       	cpc	r31, r25
    1626:	21 f4       	brne	.+8      	; 0x1630 <SYS_TimerStarted+0x1a>
    1628:	0c c0       	rjmp	.+24     	; 0x1642 <SYS_TimerStarted+0x2c>
    162a:	8e 17       	cp	r24, r30
    162c:	9f 07       	cpc	r25, r31
    162e:	59 f0       	breq	.+22     	; 0x1646 <SYS_TimerStarted+0x30>
    1630:	01 90       	ld	r0, Z+
    1632:	f0 81       	ld	r31, Z
    1634:	e0 2d       	mov	r30, r0
    1636:	30 97       	sbiw	r30, 0x00	; 0
    1638:	c1 f7       	brne	.-16     	; 0x162a <SYS_TimerStarted+0x14>
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	08 95       	ret
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	08 95       	ret
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	08 95       	ret
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	08 95       	ret

0000164a <SYS_TimerStart>:
    164a:	cf 93       	push	r28
    164c:	df 93       	push	r29
    164e:	ec 01       	movw	r28, r24
    1650:	e2 df       	rcall	.-60     	; 0x1616 <SYS_TimerStarted>
    1652:	81 11       	cpse	r24, r1
    1654:	02 c0       	rjmp	.+4      	; 0x165a <SYS_TimerStart+0x10>
    1656:	ce 01       	movw	r24, r28
    1658:	38 df       	rcall	.-400    	; 0x14ca <placeTimer>
    165a:	df 91       	pop	r29
    165c:	cf 91       	pop	r28
    165e:	08 95       	ret

00001660 <SYS_TimerTaskHandler>:
    1660:	cf 92       	push	r12
    1662:	df 92       	push	r13
    1664:	ef 92       	push	r14
    1666:	ff 92       	push	r15
    1668:	cf 93       	push	r28
    166a:	df 93       	push	r29
    166c:	80 91 d9 19 	lds	r24, 0x19D9	; 0x8019d9 <halTimerIrqCount>
    1670:	88 23       	and	r24, r24
    1672:	09 f4       	brne	.+2      	; 0x1676 <SYS_TimerTaskHandler+0x16>
    1674:	59 c0       	rjmp	.+178    	; 0x1728 <SYS_TimerTaskHandler+0xc8>
    1676:	8f b7       	in	r24, 0x3f	; 63
    1678:	f8 94       	cli
    167a:	c0 90 d9 19 	lds	r12, 0x19D9	; 0x8019d9 <halTimerIrqCount>
    167e:	10 92 d9 19 	sts	0x19D9, r1	; 0x8019d9 <halTimerIrqCount>
    1682:	8f bf       	out	0x3f, r24	; 63
    1684:	d1 2c       	mov	r13, r1
    1686:	e1 2c       	mov	r14, r1
    1688:	f1 2c       	mov	r15, r1
    168a:	cc 0c       	add	r12, r12
    168c:	dd 1c       	adc	r13, r13
    168e:	ee 1c       	adc	r14, r14
    1690:	ff 1c       	adc	r15, r15
    1692:	d7 01       	movw	r26, r14
    1694:	c6 01       	movw	r24, r12
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	aa 1f       	adc	r26, r26
    169c:	bb 1f       	adc	r27, r27
    169e:	88 0f       	add	r24, r24
    16a0:	99 1f       	adc	r25, r25
    16a2:	aa 1f       	adc	r26, r26
    16a4:	bb 1f       	adc	r27, r27
    16a6:	c8 0e       	add	r12, r24
    16a8:	d9 1e       	adc	r13, r25
    16aa:	ea 1e       	adc	r14, r26
    16ac:	fb 1e       	adc	r15, r27
    16ae:	c0 91 d7 19 	lds	r28, 0x19D7	; 0x8019d7 <timers>
    16b2:	d0 91 d8 19 	lds	r29, 0x19D8	; 0x8019d8 <timers+0x1>
    16b6:	20 97       	sbiw	r28, 0x00	; 0
    16b8:	b9 f1       	breq	.+110    	; 0x1728 <SYS_TimerTaskHandler+0xc8>
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	9b 81       	ldd	r25, Y+3	; 0x03
    16be:	ac 81       	ldd	r26, Y+4	; 0x04
    16c0:	bd 81       	ldd	r27, Y+5	; 0x05
    16c2:	c8 16       	cp	r12, r24
    16c4:	d9 06       	cpc	r13, r25
    16c6:	ea 06       	cpc	r14, r26
    16c8:	fb 06       	cpc	r15, r27
    16ca:	10 f1       	brcs	.+68     	; 0x1710 <SYS_TimerTaskHandler+0xb0>
    16cc:	c8 1a       	sub	r12, r24
    16ce:	d9 0a       	sbc	r13, r25
    16d0:	ea 0a       	sbc	r14, r26
    16d2:	fb 0a       	sbc	r15, r27
    16d4:	88 81       	ld	r24, Y
    16d6:	99 81       	ldd	r25, Y+1	; 0x01
    16d8:	90 93 d8 19 	sts	0x19D8, r25	; 0x8019d8 <timers+0x1>
    16dc:	80 93 d7 19 	sts	0x19D7, r24	; 0x8019d7 <timers>
    16e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    16e2:	81 30       	cpi	r24, 0x01	; 1
    16e4:	11 f4       	brne	.+4      	; 0x16ea <SYS_TimerTaskHandler+0x8a>
    16e6:	ce 01       	movw	r24, r28
    16e8:	f0 de       	rcall	.-544    	; 0x14ca <placeTimer>
    16ea:	eb 85       	ldd	r30, Y+11	; 0x0b
    16ec:	fc 85       	ldd	r31, Y+12	; 0x0c
    16ee:	ce 01       	movw	r24, r28
    16f0:	19 95       	eicall
    16f2:	c0 91 d7 19 	lds	r28, 0x19D7	; 0x8019d7 <timers>
    16f6:	d0 91 d8 19 	lds	r29, 0x19D8	; 0x8019d8 <timers+0x1>
    16fa:	20 97       	sbiw	r28, 0x00	; 0
    16fc:	a9 f0       	breq	.+42     	; 0x1728 <SYS_TimerTaskHandler+0xc8>
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	9b 81       	ldd	r25, Y+3	; 0x03
    1702:	ac 81       	ldd	r26, Y+4	; 0x04
    1704:	bd 81       	ldd	r27, Y+5	; 0x05
    1706:	c8 16       	cp	r12, r24
    1708:	d9 06       	cpc	r13, r25
    170a:	ea 06       	cpc	r14, r26
    170c:	fb 06       	cpc	r15, r27
    170e:	f0 f6       	brcc	.-68     	; 0x16cc <SYS_TimerTaskHandler+0x6c>
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	9b 81       	ldd	r25, Y+3	; 0x03
    1714:	ac 81       	ldd	r26, Y+4	; 0x04
    1716:	bd 81       	ldd	r27, Y+5	; 0x05
    1718:	8c 19       	sub	r24, r12
    171a:	9d 09       	sbc	r25, r13
    171c:	ae 09       	sbc	r26, r14
    171e:	bf 09       	sbc	r27, r15
    1720:	8a 83       	std	Y+2, r24	; 0x02
    1722:	9b 83       	std	Y+3, r25	; 0x03
    1724:	ac 83       	std	Y+4, r26	; 0x04
    1726:	bd 83       	std	Y+5, r27	; 0x05
    1728:	df 91       	pop	r29
    172a:	cf 91       	pop	r28
    172c:	ff 90       	pop	r15
    172e:	ef 90       	pop	r14
    1730:	df 90       	pop	r13
    1732:	cf 90       	pop	r12
    1734:	08 95       	ret

00001736 <__udivmodsi4>:
    1736:	a1 e2       	ldi	r26, 0x21	; 33
    1738:	1a 2e       	mov	r1, r26
    173a:	aa 1b       	sub	r26, r26
    173c:	bb 1b       	sub	r27, r27
    173e:	fd 01       	movw	r30, r26
    1740:	0d c0       	rjmp	.+26     	; 0x175c <__udivmodsi4_ep>

00001742 <__udivmodsi4_loop>:
    1742:	aa 1f       	adc	r26, r26
    1744:	bb 1f       	adc	r27, r27
    1746:	ee 1f       	adc	r30, r30
    1748:	ff 1f       	adc	r31, r31
    174a:	a2 17       	cp	r26, r18
    174c:	b3 07       	cpc	r27, r19
    174e:	e4 07       	cpc	r30, r20
    1750:	f5 07       	cpc	r31, r21
    1752:	20 f0       	brcs	.+8      	; 0x175c <__udivmodsi4_ep>
    1754:	a2 1b       	sub	r26, r18
    1756:	b3 0b       	sbc	r27, r19
    1758:	e4 0b       	sbc	r30, r20
    175a:	f5 0b       	sbc	r31, r21

0000175c <__udivmodsi4_ep>:
    175c:	66 1f       	adc	r22, r22
    175e:	77 1f       	adc	r23, r23
    1760:	88 1f       	adc	r24, r24
    1762:	99 1f       	adc	r25, r25
    1764:	1a 94       	dec	r1
    1766:	69 f7       	brne	.-38     	; 0x1742 <__udivmodsi4_loop>
    1768:	60 95       	com	r22
    176a:	70 95       	com	r23
    176c:	80 95       	com	r24
    176e:	90 95       	com	r25
    1770:	9b 01       	movw	r18, r22
    1772:	ac 01       	movw	r20, r24
    1774:	bd 01       	movw	r22, r26
    1776:	cf 01       	movw	r24, r30
    1778:	08 95       	ret

0000177a <do_rand>:
    177a:	8f 92       	push	r8
    177c:	9f 92       	push	r9
    177e:	af 92       	push	r10
    1780:	bf 92       	push	r11
    1782:	cf 92       	push	r12
    1784:	df 92       	push	r13
    1786:	ef 92       	push	r14
    1788:	ff 92       	push	r15
    178a:	cf 93       	push	r28
    178c:	df 93       	push	r29
    178e:	ec 01       	movw	r28, r24
    1790:	68 81       	ld	r22, Y
    1792:	79 81       	ldd	r23, Y+1	; 0x01
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	9b 81       	ldd	r25, Y+3	; 0x03
    1798:	61 15       	cp	r22, r1
    179a:	71 05       	cpc	r23, r1
    179c:	81 05       	cpc	r24, r1
    179e:	91 05       	cpc	r25, r1
    17a0:	21 f4       	brne	.+8      	; 0x17aa <do_rand+0x30>
    17a2:	64 e2       	ldi	r22, 0x24	; 36
    17a4:	79 ed       	ldi	r23, 0xD9	; 217
    17a6:	8b e5       	ldi	r24, 0x5B	; 91
    17a8:	97 e0       	ldi	r25, 0x07	; 7
    17aa:	2d e1       	ldi	r18, 0x1D	; 29
    17ac:	33 ef       	ldi	r19, 0xF3	; 243
    17ae:	41 e0       	ldi	r20, 0x01	; 1
    17b0:	50 e0       	ldi	r21, 0x00	; 0
    17b2:	41 d0       	rcall	.+130    	; 0x1836 <__divmodsi4>
    17b4:	49 01       	movw	r8, r18
    17b6:	5a 01       	movw	r10, r20
    17b8:	9b 01       	movw	r18, r22
    17ba:	ac 01       	movw	r20, r24
    17bc:	a7 ea       	ldi	r26, 0xA7	; 167
    17be:	b1 e4       	ldi	r27, 0x41	; 65
    17c0:	56 d0       	rcall	.+172    	; 0x186e <__muluhisi3>
    17c2:	6b 01       	movw	r12, r22
    17c4:	7c 01       	movw	r14, r24
    17c6:	ac ee       	ldi	r26, 0xEC	; 236
    17c8:	b4 ef       	ldi	r27, 0xF4	; 244
    17ca:	a5 01       	movw	r20, r10
    17cc:	94 01       	movw	r18, r8
    17ce:	5b d0       	rcall	.+182    	; 0x1886 <__mulohisi3>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	8c 0d       	add	r24, r12
    17d6:	9d 1d       	adc	r25, r13
    17d8:	ae 1d       	adc	r26, r14
    17da:	bf 1d       	adc	r27, r15
    17dc:	b7 ff       	sbrs	r27, 7
    17de:	03 c0       	rjmp	.+6      	; 0x17e6 <do_rand+0x6c>
    17e0:	01 97       	sbiw	r24, 0x01	; 1
    17e2:	a1 09       	sbc	r26, r1
    17e4:	b0 48       	sbci	r27, 0x80	; 128
    17e6:	88 83       	st	Y, r24
    17e8:	99 83       	std	Y+1, r25	; 0x01
    17ea:	aa 83       	std	Y+2, r26	; 0x02
    17ec:	bb 83       	std	Y+3, r27	; 0x03
    17ee:	9f 77       	andi	r25, 0x7F	; 127
    17f0:	df 91       	pop	r29
    17f2:	cf 91       	pop	r28
    17f4:	ff 90       	pop	r15
    17f6:	ef 90       	pop	r14
    17f8:	df 90       	pop	r13
    17fa:	cf 90       	pop	r12
    17fc:	bf 90       	pop	r11
    17fe:	af 90       	pop	r10
    1800:	9f 90       	pop	r9
    1802:	8f 90       	pop	r8
    1804:	08 95       	ret

00001806 <rand_r>:
    1806:	b9 cf       	rjmp	.-142    	; 0x177a <do_rand>

00001808 <rand>:
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	92 e0       	ldi	r25, 0x02	; 2
    180c:	b6 cf       	rjmp	.-148    	; 0x177a <do_rand>

0000180e <srand>:
    180e:	a0 e0       	ldi	r26, 0x00	; 0
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    1816:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    181a:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    181e:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    1822:	08 95       	ret

00001824 <memcpy>:
    1824:	fb 01       	movw	r30, r22
    1826:	dc 01       	movw	r26, r24
    1828:	02 c0       	rjmp	.+4      	; 0x182e <memcpy+0xa>
    182a:	01 90       	ld	r0, Z+
    182c:	0d 92       	st	X+, r0
    182e:	41 50       	subi	r20, 0x01	; 1
    1830:	50 40       	sbci	r21, 0x00	; 0
    1832:	d8 f7       	brcc	.-10     	; 0x182a <memcpy+0x6>
    1834:	08 95       	ret

00001836 <__divmodsi4>:
    1836:	05 2e       	mov	r0, r21
    1838:	97 fb       	bst	r25, 7
    183a:	16 f4       	brtc	.+4      	; 0x1840 <__divmodsi4+0xa>
    183c:	00 94       	com	r0
    183e:	0f d0       	rcall	.+30     	; 0x185e <__negsi2>
    1840:	57 fd       	sbrc	r21, 7
    1842:	05 d0       	rcall	.+10     	; 0x184e <__divmodsi4_neg2>
    1844:	78 df       	rcall	.-272    	; 0x1736 <__udivmodsi4>
    1846:	07 fc       	sbrc	r0, 7
    1848:	02 d0       	rcall	.+4      	; 0x184e <__divmodsi4_neg2>
    184a:	46 f4       	brtc	.+16     	; 0x185c <__divmodsi4_exit>
    184c:	08 c0       	rjmp	.+16     	; 0x185e <__negsi2>

0000184e <__divmodsi4_neg2>:
    184e:	50 95       	com	r21
    1850:	40 95       	com	r20
    1852:	30 95       	com	r19
    1854:	21 95       	neg	r18
    1856:	3f 4f       	sbci	r19, 0xFF	; 255
    1858:	4f 4f       	sbci	r20, 0xFF	; 255
    185a:	5f 4f       	sbci	r21, 0xFF	; 255

0000185c <__divmodsi4_exit>:
    185c:	08 95       	ret

0000185e <__negsi2>:
    185e:	90 95       	com	r25
    1860:	80 95       	com	r24
    1862:	70 95       	com	r23
    1864:	61 95       	neg	r22
    1866:	7f 4f       	sbci	r23, 0xFF	; 255
    1868:	8f 4f       	sbci	r24, 0xFF	; 255
    186a:	9f 4f       	sbci	r25, 0xFF	; 255
    186c:	08 95       	ret

0000186e <__muluhisi3>:
    186e:	0f d0       	rcall	.+30     	; 0x188e <__umulhisi3>
    1870:	a5 9f       	mul	r26, r21
    1872:	90 0d       	add	r25, r0
    1874:	b4 9f       	mul	r27, r20
    1876:	90 0d       	add	r25, r0
    1878:	a4 9f       	mul	r26, r20
    187a:	80 0d       	add	r24, r0
    187c:	91 1d       	adc	r25, r1
    187e:	11 24       	eor	r1, r1
    1880:	08 95       	ret

00001882 <__mulshisi3>:
    1882:	b7 ff       	sbrs	r27, 7
    1884:	f4 cf       	rjmp	.-24     	; 0x186e <__muluhisi3>

00001886 <__mulohisi3>:
    1886:	f3 df       	rcall	.-26     	; 0x186e <__muluhisi3>
    1888:	82 1b       	sub	r24, r18
    188a:	93 0b       	sbc	r25, r19
    188c:	08 95       	ret

0000188e <__umulhisi3>:
    188e:	a2 9f       	mul	r26, r18
    1890:	b0 01       	movw	r22, r0
    1892:	b3 9f       	mul	r27, r19
    1894:	c0 01       	movw	r24, r0
    1896:	a3 9f       	mul	r26, r19
    1898:	70 0d       	add	r23, r0
    189a:	81 1d       	adc	r24, r1
    189c:	11 24       	eor	r1, r1
    189e:	91 1d       	adc	r25, r1
    18a0:	b2 9f       	mul	r27, r18
    18a2:	70 0d       	add	r23, r0
    18a4:	81 1d       	adc	r24, r1
    18a6:	11 24       	eor	r1, r1
    18a8:	91 1d       	adc	r25, r1
    18aa:	08 95       	ret

000018ac <_exit>:
    18ac:	f8 94       	cli

000018ae <__stop_program>:
    18ae:	ff cf       	rjmp	.-2      	; 0x18ae <__stop_program>
